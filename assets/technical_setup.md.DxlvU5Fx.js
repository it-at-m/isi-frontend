import{_ as e,c as n,o as r,a4 as a}from"./chunks/framework.DpC1ZpOZ.js";const f=JSON.parse('{"title":"Technischer Setup","description":"","frontmatter":{},"headers":[],"relativePath":"technical_setup.md","filePath":"technical_setup.md"}'),i={name:"technical_setup.md"},t=a(`<h1 id="technischer-setup" tabindex="-1">Technischer Setup <a class="header-anchor" href="#technischer-setup" aria-label="Permalink to &quot;Technischer Setup&quot;">​</a></h1><h2 id="voraussetzungen" tabindex="-1">Voraussetzungen <a class="header-anchor" href="#voraussetzungen" aria-label="Permalink to &quot;Voraussetzungen&quot;">​</a></h2><p>Für den Bau des Frontend Services muss JDK 11 (oder neuer), Maven 3.8.1 (oder neuer) und npm 8.11.0 (oder neuer) installiert sein:</p><pre><code>java -version
mvn -version
npm -version
</code></pre><p>Für den Bau des Backend Services muss JDK 11 (oder neuer) und Maven 3.8.1 (oder neuer) installiert sein:</p><pre><code>java -version
mvn -version
</code></pre><h2 id="source-code-des-frontends-holen" tabindex="-1">Source Code des Frontends holen <a class="header-anchor" href="#source-code-des-frontends-holen" aria-label="Permalink to &quot;Source Code des Frontends holen&quot;">​</a></h2><p>Sourcen auf den lokalen Rechner holen</p><pre><code>git clone https://github.com/it-at-m/isi-frontend.git
cd isi-frontend
</code></pre><p>Die Sourcen sind in zwei Verzeichnissen abgelegt:</p><ol><li><code>apigateway</code>: Enthält die Sourcen des API Gateways.</li><li><code>frontend</code>: Enthält die Sourcen der Oberfläche.</li></ol><h2 id="source-code-des-backends-holen" tabindex="-1">Source Code des Backends holen <a class="header-anchor" href="#source-code-des-backends-holen" aria-label="Permalink to &quot;Source Code des Backends holen&quot;">​</a></h2><p>Sourcen auf den lokalen Rechner holen</p><pre><code>git clone https://github.com/it-at-m/isi-backend.git
cd isi-backend
</code></pre><h2 id="konfiguration-des-services" tabindex="-1">Konfiguration des Services <a class="header-anchor" href="#konfiguration-des-services" aria-label="Permalink to &quot;Konfiguration des Services&quot;">​</a></h2><h3 id="frontend" tabindex="-1">Frontend <a class="header-anchor" href="#frontend" aria-label="Permalink to &quot;Frontend&quot;">​</a></h3><p>Für die lokale Umgebung erstellt man die Konfigurationsdatei.</p><pre><code>apigateway/src/main/resources/application-local.yml
</code></pre><p>Das API Gateway startet standardmäßig mit dem Port <code>8082</code>. Dieser kann in der lokalen Umgebung über die Konfigurationsdatei umgestellt werden.</p><p>In der Konfigurationsdatei wird außerdem die Route zum Backend, die für den Zugriff auf das API Gateway erlaubten URLS und optional eine Anbindung an einen Identity Provider über OpenId Connect konfiguriert.</p><p>Diese konfiguriert den API Gateway Port, die Route zum Backend Service auf dem lokalen Rechner und die URLs des für die Entwicklung lokal gestareten Frontends.</p><h3 id="backend" tabindex="-1">Backend <a class="header-anchor" href="#backend" aria-label="Permalink to &quot;Backend&quot;">​</a></h3><p>Für die lokale Umgebung erstellt man die Konfigurationsdatei</p><pre><code>src/main/resources/application-local.yml
</code></pre><p>Der Backend Service startet standardmäßig mit dem Port <code>8080</code> und sollte in der lokalen Umgebung umgestellt werden.</p><p>Zusätzlich wird die Datenbank, die Anbindung an einen <a href="https://github.com/it-at-m/digiwf-core/tree/dev/digiwf-integrations/digiwf-s3-integration" target="_blank" rel="noreferrer">S3 Storages Service</a> mit zulässigen MIME-Types für das Dateihandling und optional eine Anbindung an einen Identity Provider über OpenId Connect in der Konfigurationsdatei konfiguriert.</p><p>Diese konfiguriert den Server Port, eine HSQL Datenbank, einen lokalen Service zur Anbindung eines <a href="https://github.com/it-at-m/digiwf-core/tree/dev/digiwf-integrations/digiwf-s3-integration" target="_blank" rel="noreferrer">S3 Storages Services</a> und die für den Dateiupload zulässigen MIME-Types pdf und png.</p><h2 id="build-und-start" tabindex="-1">Build und Start <a class="header-anchor" href="#build-und-start" aria-label="Permalink to &quot;Build und Start&quot;">​</a></h2><h3 id="bau-der-services" tabindex="-1">Bau der Services <a class="header-anchor" href="#bau-der-services" aria-label="Permalink to &quot;Bau der Services&quot;">​</a></h3><p>Die Services werden mit folgendem Befehl gebaut</p><pre><code>mvn clean install
</code></pre><h3 id="start-der-services" tabindex="-1">Start der Services <a class="header-anchor" href="#start-der-services" aria-label="Permalink to &quot;Start der Services&quot;">​</a></h3><p>Es befinden sich die folgenden Scripts zum Start der Services auf dem lokalen Rechner:</p><ol><li><code>runLocal.bat</code> bzw. <code>runLocal.sh</code>: Die Benutzer*innen müssen sich über einen Identity Provider authentifizieren.</li><li><code>runLocalNoSecurity.bat</code> bzw. <code>runLocalNoSecurity.sh</code>: Die Anwendung kann ohne Authentifizierung bedient werden.</li></ol><p>Bei isi-frontend wird das API Gateway mit dem integrierten Frontend gestartet. Diese Scripts befinden sich deshalb im Verzeichnis <code>apigateway</code>.</p><p>Beim Backend befinden sich die Scripts im Wurzelverzeichnis <code>.</code>.</p><p>Zum Start eines Services wird eines der Scripts ausgeführt, z.B. zum Start des API Gateways:</p><pre><code>cd apigateway
runLocalNoSecurity.sh
</code></pre><p>Für die Entwicklung kann zusätzlich das Frontend separat gestartet werden. Dieses nutzt das lokale API Gateway für die Zugriffe auf das Backend. Zum Start des Frontends führt man folgende Befehle aus:</p><pre><code>cd frontend
npm install
npm run dev
</code></pre>`,40),d=[t];function o(s,c,l,u,h,p){return r(),n("div",null,d)}const m=e(i,[["render",o]]);export{f as __pageData,m as default};
