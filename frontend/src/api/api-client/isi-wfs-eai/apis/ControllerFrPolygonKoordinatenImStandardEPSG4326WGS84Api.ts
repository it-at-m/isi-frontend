/* tslint:disable */
/* eslint-disable */
/**
 * ISI WFS EAI
 * ISI WFS EAI - Service zum Abfragen von Geoinformationen des WFS
 *
 * The version of the OpenAPI document: 0.0.1-SNAPSHOT
 * Contact: unbekannt@muenchen.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CoordinatesDto,
    CoordinatesDtoFromJSON,
    CoordinatesDtoToJSON,
    FlurstueckCollectionDto,
    FlurstueckCollectionDtoFromJSON,
    FlurstueckCollectionDtoToJSON,
    GemarkungCollectionDto,
    GemarkungCollectionDtoFromJSON,
    GemarkungCollectionDtoToJSON,
    GrundschulsprengelCollectionDto,
    GrundschulsprengelCollectionDtoFromJSON,
    GrundschulsprengelCollectionDtoToJSON,
    GrundschulstandortCollectionDto,
    GrundschulstandortCollectionDtoFromJSON,
    GrundschulstandortCollectionDtoToJSON,
    GrundschulverbundCollectionDto,
    GrundschulverbundCollectionDtoFromJSON,
    GrundschulverbundCollectionDtoToJSON,
    InformationResponseDto,
    InformationResponseDtoFromJSON,
    InformationResponseDtoToJSON,
    KitaplanungsbereichCollectionDto,
    KitaplanungsbereichCollectionDtoFromJSON,
    KitaplanungsbereichCollectionDtoToJSON,
    MittelschulsprengelCollectionDto,
    MittelschulsprengelCollectionDtoFromJSON,
    MittelschulsprengelCollectionDtoToJSON,
    MittelschulstandortCollectionDto,
    MittelschulstandortCollectionDtoFromJSON,
    MittelschulstandortCollectionDtoToJSON,
    MittelschulverbundCollectionDto,
    MittelschulverbundCollectionDtoFromJSON,
    MittelschulverbundCollectionDtoToJSON,
    StadtbezirkCollectionDto,
    StadtbezirkCollectionDtoFromJSON,
    StadtbezirkCollectionDtoToJSON,
} from '../models';

export interface GetFlurstueckeRequest {
    coordinatesDto: CoordinatesDto;
}

export interface GetGemarkungenRequest {
    coordinatesDto: CoordinatesDto;
}

export interface GetGrundschulsprengelRequest {
    coordinatesDto: CoordinatesDto;
}

export interface GetGrundschulstandorteRequest {
    coordinatesDto: CoordinatesDto;
}

export interface GetGrundschulverbuendeRequest {
    coordinatesDto: CoordinatesDto;
}

export interface GetKitaplanungsbereicheRequest {
    coordinatesDto: CoordinatesDto;
}

export interface GetMittelschulsprengelRequest {
    coordinatesDto: CoordinatesDto;
}

export interface GetMittelschulstandorteRequest {
    coordinatesDto: CoordinatesDto;
}

export interface GetMittelschulverbuendeRequest {
    coordinatesDto: CoordinatesDto;
}

export interface GetStadtbezirkeRequest {
    coordinatesDto: CoordinatesDto;
}

/**
 * 
 */
export class ControllerFrPolygonKoordinatenImStandardEPSG4326WGS84Api extends runtime.BaseAPI {

    /**
     * Holt die Flurstuecke die sich mit den Polygon definiert mit Koordinaten im Standard EPSG:4326 (WGS84) überschneiden.
     */
    async getFlurstueckeRaw(requestParameters: GetFlurstueckeRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<FlurstueckCollectionDto>> {
        if (requestParameters.coordinatesDto === null || requestParameters.coordinatesDto === undefined) {
            throw new runtime.RequiredError('coordinatesDto','Required parameter requestParameters.coordinatesDto was null or undefined when calling getFlurstuecke.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/polygon/flurstuecke`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoordinatesDtoToJSON(requestParameters.coordinatesDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FlurstueckCollectionDtoFromJSON(jsonValue));
    }

    /**
     * Holt die Flurstuecke die sich mit den Polygon definiert mit Koordinaten im Standard EPSG:4326 (WGS84) überschneiden.
     */
    async getFlurstuecke(requestParameters: GetFlurstueckeRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<FlurstueckCollectionDto> {
        const response = await this.getFlurstueckeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Holt die Gemarkungen die sich mit den Polygon definiert mit Koordinaten im Standard EPSG:4326 (WGS84) überschneiden.
     */
    async getGemarkungenRaw(requestParameters: GetGemarkungenRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<GemarkungCollectionDto>> {
        if (requestParameters.coordinatesDto === null || requestParameters.coordinatesDto === undefined) {
            throw new runtime.RequiredError('coordinatesDto','Required parameter requestParameters.coordinatesDto was null or undefined when calling getGemarkungen.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/polygon/gemarkungen`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoordinatesDtoToJSON(requestParameters.coordinatesDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GemarkungCollectionDtoFromJSON(jsonValue));
    }

    /**
     * Holt die Gemarkungen die sich mit den Polygon definiert mit Koordinaten im Standard EPSG:4326 (WGS84) überschneiden.
     */
    async getGemarkungen(requestParameters: GetGemarkungenRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<GemarkungCollectionDto> {
        const response = await this.getGemarkungenRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Holt die Grundschulsprengel die sich mit den Polygon definiert mit Koordinaten im Standard EPSG:4326 (WGS84) überschneiden.
     */
    async getGrundschulsprengelRaw(requestParameters: GetGrundschulsprengelRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<GrundschulsprengelCollectionDto>> {
        if (requestParameters.coordinatesDto === null || requestParameters.coordinatesDto === undefined) {
            throw new runtime.RequiredError('coordinatesDto','Required parameter requestParameters.coordinatesDto was null or undefined when calling getGrundschulsprengel.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/polygon/grundschulsprengel`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoordinatesDtoToJSON(requestParameters.coordinatesDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GrundschulsprengelCollectionDtoFromJSON(jsonValue));
    }

    /**
     * Holt die Grundschulsprengel die sich mit den Polygon definiert mit Koordinaten im Standard EPSG:4326 (WGS84) überschneiden.
     */
    async getGrundschulsprengel(requestParameters: GetGrundschulsprengelRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<GrundschulsprengelCollectionDto> {
        const response = await this.getGrundschulsprengelRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Holt die Grundschulstandorte die sich mit den Polygon definiert mit Koordinaten im Standard EPSG:4326 (WGS84) überschneiden.
     */
    async getGrundschulstandorteRaw(requestParameters: GetGrundschulstandorteRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<GrundschulstandortCollectionDto>> {
        if (requestParameters.coordinatesDto === null || requestParameters.coordinatesDto === undefined) {
            throw new runtime.RequiredError('coordinatesDto','Required parameter requestParameters.coordinatesDto was null or undefined when calling getGrundschulstandorte.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/polygon/grundschulstandorte`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoordinatesDtoToJSON(requestParameters.coordinatesDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GrundschulstandortCollectionDtoFromJSON(jsonValue));
    }

    /**
     * Holt die Grundschulstandorte die sich mit den Polygon definiert mit Koordinaten im Standard EPSG:4326 (WGS84) überschneiden.
     */
    async getGrundschulstandorte(requestParameters: GetGrundschulstandorteRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<GrundschulstandortCollectionDto> {
        const response = await this.getGrundschulstandorteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Holt die  Grundschulverbuende die sich mit den Polygon definiert mit Koordinaten im Standard EPSG:4326 (WGS84) überschneiden.
     */
    async getGrundschulverbuendeRaw(requestParameters: GetGrundschulverbuendeRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<GrundschulverbundCollectionDto>> {
        if (requestParameters.coordinatesDto === null || requestParameters.coordinatesDto === undefined) {
            throw new runtime.RequiredError('coordinatesDto','Required parameter requestParameters.coordinatesDto was null or undefined when calling getGrundschulverbuende.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/polygon/grundschulverbuende`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoordinatesDtoToJSON(requestParameters.coordinatesDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GrundschulverbundCollectionDtoFromJSON(jsonValue));
    }

    /**
     * Holt die  Grundschulverbuende die sich mit den Polygon definiert mit Koordinaten im Standard EPSG:4326 (WGS84) überschneiden.
     */
    async getGrundschulverbuende(requestParameters: GetGrundschulverbuendeRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<GrundschulverbundCollectionDto> {
        const response = await this.getGrundschulverbuendeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Holt die Kitaplanungsbereiche die sich mit den Polygon definiert mit Koordinaten im Standard EPSG:4326 (WGS84) überschneiden.
     */
    async getKitaplanungsbereicheRaw(requestParameters: GetKitaplanungsbereicheRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<KitaplanungsbereichCollectionDto>> {
        if (requestParameters.coordinatesDto === null || requestParameters.coordinatesDto === undefined) {
            throw new runtime.RequiredError('coordinatesDto','Required parameter requestParameters.coordinatesDto was null or undefined when calling getKitaplanungsbereiche.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/polygon/kitaplanungsbereiche`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoordinatesDtoToJSON(requestParameters.coordinatesDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => KitaplanungsbereichCollectionDtoFromJSON(jsonValue));
    }

    /**
     * Holt die Kitaplanungsbereiche die sich mit den Polygon definiert mit Koordinaten im Standard EPSG:4326 (WGS84) überschneiden.
     */
    async getKitaplanungsbereiche(requestParameters: GetKitaplanungsbereicheRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<KitaplanungsbereichCollectionDto> {
        const response = await this.getKitaplanungsbereicheRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Holt die Mittelschulsprengel die sich mit den Polygon definiert mit Koordinaten im Standard EPSG:4326 (WGS84) überschneiden.
     */
    async getMittelschulsprengelRaw(requestParameters: GetMittelschulsprengelRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<MittelschulsprengelCollectionDto>> {
        if (requestParameters.coordinatesDto === null || requestParameters.coordinatesDto === undefined) {
            throw new runtime.RequiredError('coordinatesDto','Required parameter requestParameters.coordinatesDto was null or undefined when calling getMittelschulsprengel.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/polygon/mittelschulsprengel`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoordinatesDtoToJSON(requestParameters.coordinatesDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MittelschulsprengelCollectionDtoFromJSON(jsonValue));
    }

    /**
     * Holt die Mittelschulsprengel die sich mit den Polygon definiert mit Koordinaten im Standard EPSG:4326 (WGS84) überschneiden.
     */
    async getMittelschulsprengel(requestParameters: GetMittelschulsprengelRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<MittelschulsprengelCollectionDto> {
        const response = await this.getMittelschulsprengelRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Holt die  Mittelschulstandorte die sich mit den Polygon definiert mit Koordinaten im Standard EPSG:4326 (WGS84) überschneiden.
     */
    async getMittelschulstandorteRaw(requestParameters: GetMittelschulstandorteRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<MittelschulstandortCollectionDto>> {
        if (requestParameters.coordinatesDto === null || requestParameters.coordinatesDto === undefined) {
            throw new runtime.RequiredError('coordinatesDto','Required parameter requestParameters.coordinatesDto was null or undefined when calling getMittelschulstandorte.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/polygon/mittelschulstandorte`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoordinatesDtoToJSON(requestParameters.coordinatesDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MittelschulstandortCollectionDtoFromJSON(jsonValue));
    }

    /**
     * Holt die  Mittelschulstandorte die sich mit den Polygon definiert mit Koordinaten im Standard EPSG:4326 (WGS84) überschneiden.
     */
    async getMittelschulstandorte(requestParameters: GetMittelschulstandorteRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<MittelschulstandortCollectionDto> {
        const response = await this.getMittelschulstandorteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Holt die  Mittelschulverbuende die sich mit den Polygon definiert mit Koordinaten im Standard EPSG:4326 (WGS84) überschneiden.
     */
    async getMittelschulverbuendeRaw(requestParameters: GetMittelschulverbuendeRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<MittelschulverbundCollectionDto>> {
        if (requestParameters.coordinatesDto === null || requestParameters.coordinatesDto === undefined) {
            throw new runtime.RequiredError('coordinatesDto','Required parameter requestParameters.coordinatesDto was null or undefined when calling getMittelschulverbuende.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/polygon/mittelschulverbuende`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoordinatesDtoToJSON(requestParameters.coordinatesDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MittelschulverbundCollectionDtoFromJSON(jsonValue));
    }

    /**
     * Holt die  Mittelschulverbuende die sich mit den Polygon definiert mit Koordinaten im Standard EPSG:4326 (WGS84) überschneiden.
     */
    async getMittelschulverbuende(requestParameters: GetMittelschulverbuendeRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<MittelschulverbundCollectionDto> {
        const response = await this.getMittelschulverbuendeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Holt die Stadtbezirke die sich mit den Polygon definiert mit Koordinaten im Standard EPSG:4326 (WGS84) überschneiden.
     */
    async getStadtbezirkeRaw(requestParameters: GetStadtbezirkeRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<StadtbezirkCollectionDto>> {
        if (requestParameters.coordinatesDto === null || requestParameters.coordinatesDto === undefined) {
            throw new runtime.RequiredError('coordinatesDto','Required parameter requestParameters.coordinatesDto was null or undefined when calling getStadtbezirke.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/polygon/stadtbezirke`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoordinatesDtoToJSON(requestParameters.coordinatesDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StadtbezirkCollectionDtoFromJSON(jsonValue));
    }

    /**
     * Holt die Stadtbezirke die sich mit den Polygon definiert mit Koordinaten im Standard EPSG:4326 (WGS84) überschneiden.
     */
    async getStadtbezirke(requestParameters: GetStadtbezirkeRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<StadtbezirkCollectionDto> {
        const response = await this.getStadtbezirkeRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
