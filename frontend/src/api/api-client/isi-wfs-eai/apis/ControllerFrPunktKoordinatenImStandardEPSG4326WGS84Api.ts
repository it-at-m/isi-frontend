/* tslint:disable */
/* eslint-disable */
/**
 * ISI WFS EAI
 * ISI WFS EAI - Service zum Abfragen von Geoinformationen des WFS
 *
 * The version of the OpenAPI document: 0.0.1-SNAPSHOT
 * Contact: unbekannt@muenchen.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CoordinateDto,
    CoordinateDtoFromJSON,
    CoordinateDtoToJSON,
    FlurstueckCollectionDto,
    FlurstueckCollectionDtoFromJSON,
    FlurstueckCollectionDtoToJSON,
    GemarkungCollectionDto,
    GemarkungCollectionDtoFromJSON,
    GemarkungCollectionDtoToJSON,
    GrundschulsprengelCollectionDto,
    GrundschulsprengelCollectionDtoFromJSON,
    GrundschulsprengelCollectionDtoToJSON,
    GrundschulverbundCollectionDto,
    GrundschulverbundCollectionDtoFromJSON,
    GrundschulverbundCollectionDtoToJSON,
    InformationResponseDto,
    InformationResponseDtoFromJSON,
    InformationResponseDtoToJSON,
    KitaplanungsbereichCollectionDto,
    KitaplanungsbereichCollectionDtoFromJSON,
    KitaplanungsbereichCollectionDtoToJSON,
    MittelschulsprengelCollectionDto,
    MittelschulsprengelCollectionDtoFromJSON,
    MittelschulsprengelCollectionDtoToJSON,
    MittelschulverbundCollectionDto,
    MittelschulverbundCollectionDtoFromJSON,
    MittelschulverbundCollectionDtoToJSON,
    StadtbezirkCollectionDto,
    StadtbezirkCollectionDtoFromJSON,
    StadtbezirkCollectionDtoToJSON,
} from '../models';

export interface GetFlurstuecke1Request {
    coordinateDto: CoordinateDto;
}

export interface GetGemarkungen1Request {
    coordinateDto: CoordinateDto;
}

export interface GetGrundschulsprengel1Request {
    coordinateDto: CoordinateDto;
}

export interface GetGrundschulverbuende1Request {
    coordinateDto: CoordinateDto;
}

export interface GetKitaplanungsbereiche1Request {
    coordinateDto: CoordinateDto;
}

export interface GetMittelschulsprengel1Request {
    coordinateDto: CoordinateDto;
}

export interface GetMittelschulverbuende1Request {
    coordinateDto: CoordinateDto;
}

export interface GetStadtbezirke1Request {
    coordinateDto: CoordinateDto;
}

/**
 * 
 */
export class ControllerFrPunktKoordinatenImStandardEPSG4326WGS84Api extends runtime.BaseAPI {

    /**
     * Holt die Flurstuecke die sich mit der Punkt-Koordinate im Standard EPSG:4326 (WGS84) überschneiden.
     */
    async getFlurstuecke1Raw(requestParameters: GetFlurstuecke1Request, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<FlurstueckCollectionDto>> {
        if (requestParameters.coordinateDto === null || requestParameters.coordinateDto === undefined) {
            throw new runtime.RequiredError('coordinateDto','Required parameter requestParameters.coordinateDto was null or undefined when calling getFlurstuecke1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/point/flurstuecke`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoordinateDtoToJSON(requestParameters.coordinateDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FlurstueckCollectionDtoFromJSON(jsonValue));
    }

    /**
     * Holt die Flurstuecke die sich mit der Punkt-Koordinate im Standard EPSG:4326 (WGS84) überschneiden.
     */
    async getFlurstuecke1(requestParameters: GetFlurstuecke1Request, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<FlurstueckCollectionDto> {
        const response = await this.getFlurstuecke1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Holt die Gemarkungen die sich mit der Punkt-Koordinate im Standard EPSG:4326 (WGS84) überschneiden.
     */
    async getGemarkungen1Raw(requestParameters: GetGemarkungen1Request, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<GemarkungCollectionDto>> {
        if (requestParameters.coordinateDto === null || requestParameters.coordinateDto === undefined) {
            throw new runtime.RequiredError('coordinateDto','Required parameter requestParameters.coordinateDto was null or undefined when calling getGemarkungen1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/point/gemarkungen`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoordinateDtoToJSON(requestParameters.coordinateDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GemarkungCollectionDtoFromJSON(jsonValue));
    }

    /**
     * Holt die Gemarkungen die sich mit der Punkt-Koordinate im Standard EPSG:4326 (WGS84) überschneiden.
     */
    async getGemarkungen1(requestParameters: GetGemarkungen1Request, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<GemarkungCollectionDto> {
        const response = await this.getGemarkungen1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Holt die Grundschulsprengel die sich mit der Punkt-Koordinate im Standard EPSG:4326 (WGS84) überschneiden.
     */
    async getGrundschulsprengel1Raw(requestParameters: GetGrundschulsprengel1Request, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<GrundschulsprengelCollectionDto>> {
        if (requestParameters.coordinateDto === null || requestParameters.coordinateDto === undefined) {
            throw new runtime.RequiredError('coordinateDto','Required parameter requestParameters.coordinateDto was null or undefined when calling getGrundschulsprengel1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/point/grundschulsprengel`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoordinateDtoToJSON(requestParameters.coordinateDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GrundschulsprengelCollectionDtoFromJSON(jsonValue));
    }

    /**
     * Holt die Grundschulsprengel die sich mit der Punkt-Koordinate im Standard EPSG:4326 (WGS84) überschneiden.
     */
    async getGrundschulsprengel1(requestParameters: GetGrundschulsprengel1Request, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<GrundschulsprengelCollectionDto> {
        const response = await this.getGrundschulsprengel1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Holt die Grundschulverbuende die sich mit der Punkt-Koordinate im Standard EPSG:4326 (WGS84) überschneiden.
     */
    async getGrundschulverbuende1Raw(requestParameters: GetGrundschulverbuende1Request, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<GrundschulverbundCollectionDto>> {
        if (requestParameters.coordinateDto === null || requestParameters.coordinateDto === undefined) {
            throw new runtime.RequiredError('coordinateDto','Required parameter requestParameters.coordinateDto was null or undefined when calling getGrundschulverbuende1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/point/grundschulverbuende`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoordinateDtoToJSON(requestParameters.coordinateDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GrundschulverbundCollectionDtoFromJSON(jsonValue));
    }

    /**
     * Holt die Grundschulverbuende die sich mit der Punkt-Koordinate im Standard EPSG:4326 (WGS84) überschneiden.
     */
    async getGrundschulverbuende1(requestParameters: GetGrundschulverbuende1Request, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<GrundschulverbundCollectionDto> {
        const response = await this.getGrundschulverbuende1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Holt die Kitaplanungsbereiche die sich mit der Punkt-Koordinate im Standard EPSG:4326 (WGS84) überschneiden.
     */
    async getKitaplanungsbereiche1Raw(requestParameters: GetKitaplanungsbereiche1Request, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<KitaplanungsbereichCollectionDto>> {
        if (requestParameters.coordinateDto === null || requestParameters.coordinateDto === undefined) {
            throw new runtime.RequiredError('coordinateDto','Required parameter requestParameters.coordinateDto was null or undefined when calling getKitaplanungsbereiche1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/point/kitaplanungsbereiche`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoordinateDtoToJSON(requestParameters.coordinateDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => KitaplanungsbereichCollectionDtoFromJSON(jsonValue));
    }

    /**
     * Holt die Kitaplanungsbereiche die sich mit der Punkt-Koordinate im Standard EPSG:4326 (WGS84) überschneiden.
     */
    async getKitaplanungsbereiche1(requestParameters: GetKitaplanungsbereiche1Request, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<KitaplanungsbereichCollectionDto> {
        const response = await this.getKitaplanungsbereiche1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Holt die Mittelschulsprengel die sich mit der Punkt-Koordinate im Standard EPSG:4326 (WGS84) überschneiden.
     */
    async getMittelschulsprengel1Raw(requestParameters: GetMittelschulsprengel1Request, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<MittelschulsprengelCollectionDto>> {
        if (requestParameters.coordinateDto === null || requestParameters.coordinateDto === undefined) {
            throw new runtime.RequiredError('coordinateDto','Required parameter requestParameters.coordinateDto was null or undefined when calling getMittelschulsprengel1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/point/mittelschulsprengel`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoordinateDtoToJSON(requestParameters.coordinateDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MittelschulsprengelCollectionDtoFromJSON(jsonValue));
    }

    /**
     * Holt die Mittelschulsprengel die sich mit der Punkt-Koordinate im Standard EPSG:4326 (WGS84) überschneiden.
     */
    async getMittelschulsprengel1(requestParameters: GetMittelschulsprengel1Request, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<MittelschulsprengelCollectionDto> {
        const response = await this.getMittelschulsprengel1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Holt die Mittelschulverbuende die sich mit der Punkt-Koordinate im Standard EPSG:4326 (WGS84) überschneiden.
     */
    async getMittelschulverbuende1Raw(requestParameters: GetMittelschulverbuende1Request, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<MittelschulverbundCollectionDto>> {
        if (requestParameters.coordinateDto === null || requestParameters.coordinateDto === undefined) {
            throw new runtime.RequiredError('coordinateDto','Required parameter requestParameters.coordinateDto was null or undefined when calling getMittelschulverbuende1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/point/mittelschulverbuende`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoordinateDtoToJSON(requestParameters.coordinateDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MittelschulverbundCollectionDtoFromJSON(jsonValue));
    }

    /**
     * Holt die Mittelschulverbuende die sich mit der Punkt-Koordinate im Standard EPSG:4326 (WGS84) überschneiden.
     */
    async getMittelschulverbuende1(requestParameters: GetMittelschulverbuende1Request, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<MittelschulverbundCollectionDto> {
        const response = await this.getMittelschulverbuende1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Holt die Stadtbezirke die sich mit der Punkt-Koordinate im Standard EPSG:4326 (WGS84) überschneiden.
     */
    async getStadtbezirke1Raw(requestParameters: GetStadtbezirke1Request, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<StadtbezirkCollectionDto>> {
        if (requestParameters.coordinateDto === null || requestParameters.coordinateDto === undefined) {
            throw new runtime.RequiredError('coordinateDto','Required parameter requestParameters.coordinateDto was null or undefined when calling getStadtbezirke1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/point/stadtbezirke`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoordinateDtoToJSON(requestParameters.coordinateDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StadtbezirkCollectionDtoFromJSON(jsonValue));
    }

    /**
     * Holt die Stadtbezirke die sich mit der Punkt-Koordinate im Standard EPSG:4326 (WGS84) überschneiden.
     */
    async getStadtbezirke1(requestParameters: GetStadtbezirke1Request, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<StadtbezirkCollectionDto> {
        const response = await this.getStadtbezirke1Raw(requestParameters, initOverrides);
        return await response.value();
    }

}
