/* tslint:disable */
/* eslint-disable */
/**
 * ISI GEODATA EAI
 * ISI GEODATA EAI - Service zum Abfragen von Geoinformationen
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: unbekannt@muenchen.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  FeatureCollectionDtoFeatureDtoBezirksteilDto,
  FeatureCollectionDtoFeatureDtoFlurstueckDto,
  FeatureCollectionDtoFeatureDtoGemarkungDto,
  FeatureCollectionDtoFeatureDtoGrundschulsprengelDto,
  FeatureCollectionDtoFeatureDtoKitaplanungsbereichDto,
  FeatureCollectionDtoFeatureDtoMittelschulsprengelDto,
  FeatureCollectionDtoFeatureDtoStadtbezirkDto,
  FeatureCollectionDtoFeatureDtoViertelDto,
  InformationResponseDto,
  PointGeometryDto,
} from '../models';
import {
    FeatureCollectionDtoFeatureDtoBezirksteilDtoFromJSON,
    FeatureCollectionDtoFeatureDtoBezirksteilDtoToJSON,
    FeatureCollectionDtoFeatureDtoFlurstueckDtoFromJSON,
    FeatureCollectionDtoFeatureDtoFlurstueckDtoToJSON,
    FeatureCollectionDtoFeatureDtoGemarkungDtoFromJSON,
    FeatureCollectionDtoFeatureDtoGemarkungDtoToJSON,
    FeatureCollectionDtoFeatureDtoGrundschulsprengelDtoFromJSON,
    FeatureCollectionDtoFeatureDtoGrundschulsprengelDtoToJSON,
    FeatureCollectionDtoFeatureDtoKitaplanungsbereichDtoFromJSON,
    FeatureCollectionDtoFeatureDtoKitaplanungsbereichDtoToJSON,
    FeatureCollectionDtoFeatureDtoMittelschulsprengelDtoFromJSON,
    FeatureCollectionDtoFeatureDtoMittelschulsprengelDtoToJSON,
    FeatureCollectionDtoFeatureDtoStadtbezirkDtoFromJSON,
    FeatureCollectionDtoFeatureDtoStadtbezirkDtoToJSON,
    FeatureCollectionDtoFeatureDtoViertelDtoFromJSON,
    FeatureCollectionDtoFeatureDtoViertelDtoToJSON,
    InformationResponseDtoFromJSON,
    InformationResponseDtoToJSON,
    PointGeometryDtoFromJSON,
    PointGeometryDtoToJSON,
} from '../models';

export interface GetBezirksteile1Request {
    pointGeometryDto: PointGeometryDto;
}

export interface GetFlurstuecke1Request {
    pointGeometryDto: PointGeometryDto;
}

export interface GetGemarkungen1Request {
    pointGeometryDto: PointGeometryDto;
}

export interface GetGrundschulsprengel1Request {
    pointGeometryDto: PointGeometryDto;
}

export interface GetKitaplanungsbereiche1Request {
    pointGeometryDto: PointGeometryDto;
}

export interface GetMittelschulsprengel1Request {
    pointGeometryDto: PointGeometryDto;
}

export interface GetStadtbezirke1Request {
    pointGeometryDto: PointGeometryDto;
}

export interface GetViertel1Request {
    pointGeometryDto: PointGeometryDto;
}

/**
 * 
 */
export class ControllerZurExtraktionVonFeatureAufBasisVonPunktKoordinatenImStandardEPSG4326WGS84Api extends runtime.BaseAPI {

    /**
     * Holt die Bezirksteile die sich mit dem Punkt (im Standard EPSG:4326 (WGS84)) überschneiden.
     */
    async getBezirksteile1Raw(requestParameters: GetBezirksteile1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FeatureCollectionDtoFeatureDtoBezirksteilDto>> {
        if (requestParameters.pointGeometryDto === null || requestParameters.pointGeometryDto === undefined) {
            throw new runtime.RequiredError('pointGeometryDto','Required parameter requestParameters.pointGeometryDto was null or undefined when calling getBezirksteile1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/point/bezirksteile`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PointGeometryDtoToJSON(requestParameters.pointGeometryDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FeatureCollectionDtoFeatureDtoBezirksteilDtoFromJSON(jsonValue));
    }

    /**
     * Holt die Bezirksteile die sich mit dem Punkt (im Standard EPSG:4326 (WGS84)) überschneiden.
     */
    async getBezirksteile1(requestParameters: GetBezirksteile1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FeatureCollectionDtoFeatureDtoBezirksteilDto> {
        const response = await this.getBezirksteile1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Holt die Flurstücke die sich mit dem Punkt (im Standard EPSG:4326 (WGS84)) überschneiden.
     */
    async getFlurstuecke1Raw(requestParameters: GetFlurstuecke1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FeatureCollectionDtoFeatureDtoFlurstueckDto>> {
        if (requestParameters.pointGeometryDto === null || requestParameters.pointGeometryDto === undefined) {
            throw new runtime.RequiredError('pointGeometryDto','Required parameter requestParameters.pointGeometryDto was null or undefined when calling getFlurstuecke1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/point/flurstuecke`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PointGeometryDtoToJSON(requestParameters.pointGeometryDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FeatureCollectionDtoFeatureDtoFlurstueckDtoFromJSON(jsonValue));
    }

    /**
     * Holt die Flurstücke die sich mit dem Punkt (im Standard EPSG:4326 (WGS84)) überschneiden.
     */
    async getFlurstuecke1(requestParameters: GetFlurstuecke1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FeatureCollectionDtoFeatureDtoFlurstueckDto> {
        const response = await this.getFlurstuecke1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Holt die Gemarkungen die sich mit dem Punkt (im Standard EPSG:4326 (WGS84)) überschneiden.
     */
    async getGemarkungen1Raw(requestParameters: GetGemarkungen1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FeatureCollectionDtoFeatureDtoGemarkungDto>> {
        if (requestParameters.pointGeometryDto === null || requestParameters.pointGeometryDto === undefined) {
            throw new runtime.RequiredError('pointGeometryDto','Required parameter requestParameters.pointGeometryDto was null or undefined when calling getGemarkungen1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/point/gemarkungen`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PointGeometryDtoToJSON(requestParameters.pointGeometryDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FeatureCollectionDtoFeatureDtoGemarkungDtoFromJSON(jsonValue));
    }

    /**
     * Holt die Gemarkungen die sich mit dem Punkt (im Standard EPSG:4326 (WGS84)) überschneiden.
     */
    async getGemarkungen1(requestParameters: GetGemarkungen1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FeatureCollectionDtoFeatureDtoGemarkungDto> {
        const response = await this.getGemarkungen1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Holt die Grundschulsprengel die sich mit dem Punkt (im Standard EPSG:4326 (WGS84)) überschneiden.
     */
    async getGrundschulsprengel1Raw(requestParameters: GetGrundschulsprengel1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FeatureCollectionDtoFeatureDtoGrundschulsprengelDto>> {
        if (requestParameters.pointGeometryDto === null || requestParameters.pointGeometryDto === undefined) {
            throw new runtime.RequiredError('pointGeometryDto','Required parameter requestParameters.pointGeometryDto was null or undefined when calling getGrundschulsprengel1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/point/grundschulsprengel`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PointGeometryDtoToJSON(requestParameters.pointGeometryDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FeatureCollectionDtoFeatureDtoGrundschulsprengelDtoFromJSON(jsonValue));
    }

    /**
     * Holt die Grundschulsprengel die sich mit dem Punkt (im Standard EPSG:4326 (WGS84)) überschneiden.
     */
    async getGrundschulsprengel1(requestParameters: GetGrundschulsprengel1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FeatureCollectionDtoFeatureDtoGrundschulsprengelDto> {
        const response = await this.getGrundschulsprengel1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Holt die Kitaplanungsbereiche die sich mit dem Punkt (im Standard EPSG:4326 (WGS84)) überschneiden.
     */
    async getKitaplanungsbereiche1Raw(requestParameters: GetKitaplanungsbereiche1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FeatureCollectionDtoFeatureDtoKitaplanungsbereichDto>> {
        if (requestParameters.pointGeometryDto === null || requestParameters.pointGeometryDto === undefined) {
            throw new runtime.RequiredError('pointGeometryDto','Required parameter requestParameters.pointGeometryDto was null or undefined when calling getKitaplanungsbereiche1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/point/kitaplanungsbereiche`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PointGeometryDtoToJSON(requestParameters.pointGeometryDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FeatureCollectionDtoFeatureDtoKitaplanungsbereichDtoFromJSON(jsonValue));
    }

    /**
     * Holt die Kitaplanungsbereiche die sich mit dem Punkt (im Standard EPSG:4326 (WGS84)) überschneiden.
     */
    async getKitaplanungsbereiche1(requestParameters: GetKitaplanungsbereiche1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FeatureCollectionDtoFeatureDtoKitaplanungsbereichDto> {
        const response = await this.getKitaplanungsbereiche1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Holt die Mittelschulsprengel die sich mit dem Punkt (im Standard EPSG:4326 (WGS84)) überschneiden.
     */
    async getMittelschulsprengel1Raw(requestParameters: GetMittelschulsprengel1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FeatureCollectionDtoFeatureDtoMittelschulsprengelDto>> {
        if (requestParameters.pointGeometryDto === null || requestParameters.pointGeometryDto === undefined) {
            throw new runtime.RequiredError('pointGeometryDto','Required parameter requestParameters.pointGeometryDto was null or undefined when calling getMittelschulsprengel1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/point/mittelschulsprengel`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PointGeometryDtoToJSON(requestParameters.pointGeometryDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FeatureCollectionDtoFeatureDtoMittelschulsprengelDtoFromJSON(jsonValue));
    }

    /**
     * Holt die Mittelschulsprengel die sich mit dem Punkt (im Standard EPSG:4326 (WGS84)) überschneiden.
     */
    async getMittelschulsprengel1(requestParameters: GetMittelschulsprengel1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FeatureCollectionDtoFeatureDtoMittelschulsprengelDto> {
        const response = await this.getMittelschulsprengel1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Holt die Stadtbezirke die sich mit dem Punkt (im Standard EPSG:4326 (WGS84)) überschneiden.
     */
    async getStadtbezirke1Raw(requestParameters: GetStadtbezirke1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FeatureCollectionDtoFeatureDtoStadtbezirkDto>> {
        if (requestParameters.pointGeometryDto === null || requestParameters.pointGeometryDto === undefined) {
            throw new runtime.RequiredError('pointGeometryDto','Required parameter requestParameters.pointGeometryDto was null or undefined when calling getStadtbezirke1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/point/stadtbezirke`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PointGeometryDtoToJSON(requestParameters.pointGeometryDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FeatureCollectionDtoFeatureDtoStadtbezirkDtoFromJSON(jsonValue));
    }

    /**
     * Holt die Stadtbezirke die sich mit dem Punkt (im Standard EPSG:4326 (WGS84)) überschneiden.
     */
    async getStadtbezirke1(requestParameters: GetStadtbezirke1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FeatureCollectionDtoFeatureDtoStadtbezirkDto> {
        const response = await this.getStadtbezirke1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Holt die Viertel die sich mit dem Punkt (im Standard EPSG:4326 (WGS84)) überschneiden.
     */
    async getViertel1Raw(requestParameters: GetViertel1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FeatureCollectionDtoFeatureDtoViertelDto>> {
        if (requestParameters.pointGeometryDto === null || requestParameters.pointGeometryDto === undefined) {
            throw new runtime.RequiredError('pointGeometryDto','Required parameter requestParameters.pointGeometryDto was null or undefined when calling getViertel1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/point/viertel`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PointGeometryDtoToJSON(requestParameters.pointGeometryDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FeatureCollectionDtoFeatureDtoViertelDtoFromJSON(jsonValue));
    }

    /**
     * Holt die Viertel die sich mit dem Punkt (im Standard EPSG:4326 (WGS84)) überschneiden.
     */
    async getViertel1(requestParameters: GetViertel1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FeatureCollectionDtoFeatureDtoViertelDto> {
        const response = await this.getViertel1Raw(requestParameters, initOverrides);
        return await response.value();
    }

}
