/* tslint:disable */
/* eslint-disable */
/**
 * ISI GEODATA EAI
 * ISI GEODATA EAI - Service zum Abfragen von Geoinformationen
 *
 * The version of the OpenAPI document: 0.0.1-SNAPSHOT
 * Contact: unbekannt@muenchen.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    FeatureCollectionDtoFeatureDtoFlurstueckDto,
    FeatureCollectionDtoFeatureDtoFlurstueckDtoFromJSON,
    FeatureCollectionDtoFeatureDtoFlurstueckDtoToJSON,
    FeatureCollectionDtoFeatureDtoGemarkungDto,
    FeatureCollectionDtoFeatureDtoGemarkungDtoFromJSON,
    FeatureCollectionDtoFeatureDtoGemarkungDtoToJSON,
    FeatureCollectionDtoFeatureDtoStadtbezirkDto,
    FeatureCollectionDtoFeatureDtoStadtbezirkDtoFromJSON,
    FeatureCollectionDtoFeatureDtoStadtbezirkDtoToJSON,
    InformationResponseDto,
    InformationResponseDtoFromJSON,
    InformationResponseDtoToJSON,
    PointGeometryDto,
    PointGeometryDtoFromJSON,
    PointGeometryDtoToJSON,
} from '../models';

export interface GetFlurstuecke1Request {
    pointGeometryDto: PointGeometryDto;
}

export interface GetGemarkungen1Request {
    pointGeometryDto: PointGeometryDto;
}

export interface GetStadtbezirke1Request {
    pointGeometryDto: PointGeometryDto;
}

/**
 * 
 */
export class ControllerZurExtraktionVonFeatureAufBasisVonPunktKoordinatenImStandardEPSG4326WGS84Api extends runtime.BaseAPI {

    /**
     * Holt die Flurstücke die sich mit dem Punkt (im Standard EPSG:4326 (WGS84)) überschneiden.
     */
    async getFlurstuecke1Raw(requestParameters: GetFlurstuecke1Request, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<FeatureCollectionDtoFeatureDtoFlurstueckDto>> {
        if (requestParameters.pointGeometryDto === null || requestParameters.pointGeometryDto === undefined) {
            throw new runtime.RequiredError('pointGeometryDto','Required parameter requestParameters.pointGeometryDto was null or undefined when calling getFlurstuecke1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/point/flurstuecke`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PointGeometryDtoToJSON(requestParameters.pointGeometryDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FeatureCollectionDtoFeatureDtoFlurstueckDtoFromJSON(jsonValue));
    }

    /**
     * Holt die Flurstücke die sich mit dem Punkt (im Standard EPSG:4326 (WGS84)) überschneiden.
     */
    async getFlurstuecke1(requestParameters: GetFlurstuecke1Request, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<FeatureCollectionDtoFeatureDtoFlurstueckDto> {
        const response = await this.getFlurstuecke1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Holt die Gemarkungen die sich mit dem Punkt (im Standard EPSG:4326 (WGS84)) überschneiden.
     */
    async getGemarkungen1Raw(requestParameters: GetGemarkungen1Request, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<FeatureCollectionDtoFeatureDtoGemarkungDto>> {
        if (requestParameters.pointGeometryDto === null || requestParameters.pointGeometryDto === undefined) {
            throw new runtime.RequiredError('pointGeometryDto','Required parameter requestParameters.pointGeometryDto was null or undefined when calling getGemarkungen1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/point/gemarkungen`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PointGeometryDtoToJSON(requestParameters.pointGeometryDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FeatureCollectionDtoFeatureDtoGemarkungDtoFromJSON(jsonValue));
    }

    /**
     * Holt die Gemarkungen die sich mit dem Punkt (im Standard EPSG:4326 (WGS84)) überschneiden.
     */
    async getGemarkungen1(requestParameters: GetGemarkungen1Request, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<FeatureCollectionDtoFeatureDtoGemarkungDto> {
        const response = await this.getGemarkungen1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Holt die Stadtbezirke die sich mit dem Punkt (im Standard EPSG:4326 (WGS84)) überschneiden.
     */
    async getStadtbezirke1Raw(requestParameters: GetStadtbezirke1Request, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<FeatureCollectionDtoFeatureDtoStadtbezirkDto>> {
        if (requestParameters.pointGeometryDto === null || requestParameters.pointGeometryDto === undefined) {
            throw new runtime.RequiredError('pointGeometryDto','Required parameter requestParameters.pointGeometryDto was null or undefined when calling getStadtbezirke1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/point/stadtbezirke`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PointGeometryDtoToJSON(requestParameters.pointGeometryDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FeatureCollectionDtoFeatureDtoStadtbezirkDtoFromJSON(jsonValue));
    }

    /**
     * Holt die Stadtbezirke die sich mit dem Punkt (im Standard EPSG:4326 (WGS84)) überschneiden.
     */
    async getStadtbezirke1(requestParameters: GetStadtbezirke1Request, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<FeatureCollectionDtoFeatureDtoStadtbezirkDto> {
        const response = await this.getStadtbezirke1Raw(requestParameters, initOverrides);
        return await response.value();
    }

}
