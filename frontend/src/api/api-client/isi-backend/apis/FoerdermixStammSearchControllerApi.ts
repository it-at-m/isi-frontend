/* tslint:disable */
/* eslint-disable */
/**
 * ISI Backend API
 * ISI Backend - Service für das Informationssystem für soziale Infrastrukturplanung
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: noreply@mail.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  EntityModelFoerdermixStamm,
} from '../models';
import {
    EntityModelFoerdermixStammFromJSON,
    EntityModelFoerdermixStammToJSON,
} from '../models';

export interface ExecuteSearchFoerdermixstammGet1Request {
    bezeichnungJahr?: string;
    bezeichnung?: string;
}

/**
 * 
 */
export class FoerdermixStammSearchControllerApi extends runtime.BaseAPI {

    /**
     */
    async executeSearchFoerdermixstammGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelFoerdermixStamm>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/foerdermixStamms/search/findAllByOrderByFoerdermixBezeichnungAsc`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EntityModelFoerdermixStammFromJSON(jsonValue));
    }

    /**
     */
    async executeSearchFoerdermixstammGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelFoerdermixStamm> {
        const response = await this.executeSearchFoerdermixstammGetRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async executeSearchFoerdermixstammGet1Raw(requestParameters: ExecuteSearchFoerdermixstammGet1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelFoerdermixStamm>> {
        const queryParameters: any = {};

        if (requestParameters.bezeichnungJahr !== undefined) {
            queryParameters['bezeichnungJahr'] = requestParameters.bezeichnungJahr;
        }

        if (requestParameters.bezeichnung !== undefined) {
            queryParameters['bezeichnung'] = requestParameters.bezeichnung;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/foerdermixStamms/search/findByFoerdermixBezeichnungJahrIgnoreCaseAndFoerdermixBezeichnungIgnoreCase`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EntityModelFoerdermixStammFromJSON(jsonValue));
    }

    /**
     */
    async executeSearchFoerdermixstammGet1(requestParameters: ExecuteSearchFoerdermixstammGet1Request = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelFoerdermixStamm> {
        const response = await this.executeSearchFoerdermixstammGet1Raw(requestParameters, initOverrides);
        return await response.value();
    }

}
