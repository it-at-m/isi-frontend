/* tslint:disable */
/* eslint-disable */
/**
 * ISI Backend API
 * ISI Backend - Service für das Informationssystem für soziale Infrastrukturplanung
 *
 * The version of the OpenAPI document: 1.4.0
 * Contact: noreply@mail.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  EntityModelKommentar,
} from '../models';
import {
    EntityModelKommentarFromJSON,
    EntityModelKommentarToJSON,
} from '../models';

export interface ExecuteSearchKommentarGetRequest {
    bauvorhaben?: string;
}

export interface ExecuteSearchKommentarGet1Request {
    infrastruktureinrichtung?: string;
}

export interface ExecuteSearchKommentarGet2Request {
    bauvorhaben?: string;
}

export interface ExecuteSearchKommentarGet3Request {
    infrastruktureinrichtung?: string;
}

/**
 * 
 */
export class KommentarSearchControllerApi extends runtime.BaseAPI {

    /**
     */
    async executeSearchKommentarGetRaw(requestParameters: ExecuteSearchKommentarGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters.bauvorhaben !== undefined) {
            queryParameters['bauvorhaben'] = requestParameters.bauvorhaben;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/kommentars/search/deleteAllByBauvorhabenId`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async executeSearchKommentarGet(requestParameters: ExecuteSearchKommentarGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.executeSearchKommentarGetRaw(requestParameters, initOverrides);
    }

    /**
     */
    async executeSearchKommentarGet1Raw(requestParameters: ExecuteSearchKommentarGet1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters.infrastruktureinrichtung !== undefined) {
            queryParameters['infrastruktureinrichtung'] = requestParameters.infrastruktureinrichtung;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/kommentars/search/deleteAllByInfrastruktureinrichtungId`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async executeSearchKommentarGet1(requestParameters: ExecuteSearchKommentarGet1Request = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.executeSearchKommentarGet1Raw(requestParameters, initOverrides);
    }

    /**
     */
    async executeSearchKommentarGet2Raw(requestParameters: ExecuteSearchKommentarGet2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelKommentar>> {
        const queryParameters: any = {};

        if (requestParameters.bauvorhaben !== undefined) {
            queryParameters['bauvorhaben'] = requestParameters.bauvorhaben;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/kommentars/search/findAllByBauvorhabenIdOrderByCreatedDateTimeDesc`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EntityModelKommentarFromJSON(jsonValue));
    }

    /**
     */
    async executeSearchKommentarGet2(requestParameters: ExecuteSearchKommentarGet2Request = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelKommentar> {
        const response = await this.executeSearchKommentarGet2Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async executeSearchKommentarGet3Raw(requestParameters: ExecuteSearchKommentarGet3Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelKommentar>> {
        const queryParameters: any = {};

        if (requestParameters.infrastruktureinrichtung !== undefined) {
            queryParameters['infrastruktureinrichtung'] = requestParameters.infrastruktureinrichtung;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/kommentars/search/findAllByInfrastruktureinrichtungIdOrderByCreatedDateTimeDesc`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EntityModelKommentarFromJSON(jsonValue));
    }

    /**
     */
    async executeSearchKommentarGet3(requestParameters: ExecuteSearchKommentarGet3Request = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelKommentar> {
        const response = await this.executeSearchKommentarGet3Raw(requestParameters, initOverrides);
        return await response.value();
    }

}
