/* tslint:disable */
/* eslint-disable */
/**
 * ISI Backend API
 * ISI Backend - Service für das Informationssystem für soziale Infrastrukturplanung
 *
 * The version of the OpenAPI document: 1.4.0
 * Contact: noreply@mail.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  InformationResponseDto,
  KommentarBauvorhabenDto,
  KommentarInfrastruktureinrichtungDto,
} from '../models';
import {
    InformationResponseDtoFromJSON,
    InformationResponseDtoToJSON,
    KommentarBauvorhabenDtoFromJSON,
    KommentarBauvorhabenDtoToJSON,
    KommentarInfrastruktureinrichtungDtoFromJSON,
    KommentarInfrastruktureinrichtungDtoToJSON,
} from '../models';

export interface CreateKommentarForBauvorhabenRequest {
    kommentarBauvorhabenDto: KommentarBauvorhabenDto;
}

export interface CreateKommentarForInfrastruktureinrichtungRequest {
    kommentarInfrastruktureinrichtungDto: KommentarInfrastruktureinrichtungDto;
}

export interface DeleteKommentarForBauvorhabenRequest {
    id: string;
}

export interface DeleteKommentarForInfrastruktureinrichtungRequest {
    id: string;
}

export interface GetKommentareForBauvorhabenRequest {
    bauvorhabenId: string;
}

export interface GetKommentareForInfrastruktureinrichtungRequest {
    infrastruktureinrichtungId: string;
}

export interface UpdateKommentarForBauvorhabenRequest {
    kommentarBauvorhabenDto: KommentarBauvorhabenDto;
}

export interface UpdateKommentarForInfrastruktureinrichtungRequest {
    kommentarInfrastruktureinrichtungDto: KommentarInfrastruktureinrichtungDto;
}

/**
 * 
 */
export class KommentareApi extends runtime.BaseAPI {

    /**
     * Anlegen eines neuen Kommentars für ein Bauvorhaben
     */
    async createKommentarForBauvorhabenRaw(requestParameters: CreateKommentarForBauvorhabenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<KommentarBauvorhabenDto>> {
        if (requestParameters.kommentarBauvorhabenDto === null || requestParameters.kommentarBauvorhabenDto === undefined) {
            throw new runtime.RequiredError('kommentarBauvorhabenDto','Required parameter requestParameters.kommentarBauvorhabenDto was null or undefined when calling createKommentarForBauvorhaben.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/kommentar/bauvorhaben`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: KommentarBauvorhabenDtoToJSON(requestParameters.kommentarBauvorhabenDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => KommentarBauvorhabenDtoFromJSON(jsonValue));
    }

    /**
     * Anlegen eines neuen Kommentars für ein Bauvorhaben
     */
    async createKommentarForBauvorhaben(requestParameters: CreateKommentarForBauvorhabenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<KommentarBauvorhabenDto> {
        const response = await this.createKommentarForBauvorhabenRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Anlegen eines neuen Kommentars für eine Infrastruktureinrichtung
     */
    async createKommentarForInfrastruktureinrichtungRaw(requestParameters: CreateKommentarForInfrastruktureinrichtungRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<KommentarInfrastruktureinrichtungDto>> {
        if (requestParameters.kommentarInfrastruktureinrichtungDto === null || requestParameters.kommentarInfrastruktureinrichtungDto === undefined) {
            throw new runtime.RequiredError('kommentarInfrastruktureinrichtungDto','Required parameter requestParameters.kommentarInfrastruktureinrichtungDto was null or undefined when calling createKommentarForInfrastruktureinrichtung.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/kommentar/infrastruktureinrichtung`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: KommentarInfrastruktureinrichtungDtoToJSON(requestParameters.kommentarInfrastruktureinrichtungDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => KommentarInfrastruktureinrichtungDtoFromJSON(jsonValue));
    }

    /**
     * Anlegen eines neuen Kommentars für eine Infrastruktureinrichtung
     */
    async createKommentarForInfrastruktureinrichtung(requestParameters: CreateKommentarForInfrastruktureinrichtungRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<KommentarInfrastruktureinrichtungDto> {
        const response = await this.createKommentarForInfrastruktureinrichtungRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Löschen eines Kommentars eines Bauvorhabens
     */
    async deleteKommentarForBauvorhabenRaw(requestParameters: DeleteKommentarForBauvorhabenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteKommentarForBauvorhaben.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/kommentar/bauvorhaben/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Löschen eines Kommentars eines Bauvorhabens
     */
    async deleteKommentarForBauvorhaben(requestParameters: DeleteKommentarForBauvorhabenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteKommentarForBauvorhabenRaw(requestParameters, initOverrides);
    }

    /**
     * Löschen eines Kommentars einer Infrastruktureinrichtung
     */
    async deleteKommentarForInfrastruktureinrichtungRaw(requestParameters: DeleteKommentarForInfrastruktureinrichtungRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteKommentarForInfrastruktureinrichtung.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/kommentar/infrastruktureinrichtung/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Löschen eines Kommentars einer Infrastruktureinrichtung
     */
    async deleteKommentarForInfrastruktureinrichtung(requestParameters: DeleteKommentarForInfrastruktureinrichtungRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteKommentarForInfrastruktureinrichtungRaw(requestParameters, initOverrides);
    }

    /**
     * Holen der Kommentare eines Bauvorhabens
     */
    async getKommentareForBauvorhabenRaw(requestParameters: GetKommentareForBauvorhabenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<KommentarBauvorhabenDto>>> {
        if (requestParameters.bauvorhabenId === null || requestParameters.bauvorhabenId === undefined) {
            throw new runtime.RequiredError('bauvorhabenId','Required parameter requestParameters.bauvorhabenId was null or undefined when calling getKommentareForBauvorhaben.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/kommentar/all/bauvorhaben/{bauvorhabenId}`.replace(`{${"bauvorhabenId"}}`, encodeURIComponent(String(requestParameters.bauvorhabenId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(KommentarBauvorhabenDtoFromJSON));
    }

    /**
     * Holen der Kommentare eines Bauvorhabens
     */
    async getKommentareForBauvorhaben(requestParameters: GetKommentareForBauvorhabenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<KommentarBauvorhabenDto>> {
        const response = await this.getKommentareForBauvorhabenRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Holen der Kommentare einer Infrastruktureinrichtung
     */
    async getKommentareForInfrastruktureinrichtungRaw(requestParameters: GetKommentareForInfrastruktureinrichtungRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<KommentarInfrastruktureinrichtungDto>>> {
        if (requestParameters.infrastruktureinrichtungId === null || requestParameters.infrastruktureinrichtungId === undefined) {
            throw new runtime.RequiredError('infrastruktureinrichtungId','Required parameter requestParameters.infrastruktureinrichtungId was null or undefined when calling getKommentareForInfrastruktureinrichtung.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/kommentar/all/infrastruktureinrichtung/{infrastruktureinrichtungId}`.replace(`{${"infrastruktureinrichtungId"}}`, encodeURIComponent(String(requestParameters.infrastruktureinrichtungId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(KommentarInfrastruktureinrichtungDtoFromJSON));
    }

    /**
     * Holen der Kommentare einer Infrastruktureinrichtung
     */
    async getKommentareForInfrastruktureinrichtung(requestParameters: GetKommentareForInfrastruktureinrichtungRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<KommentarInfrastruktureinrichtungDto>> {
        const response = await this.getKommentareForInfrastruktureinrichtungRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Aktualisierung eines Kommentars eines Bauvorhabens
     */
    async updateKommentarForBauvorhabenRaw(requestParameters: UpdateKommentarForBauvorhabenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<KommentarBauvorhabenDto>> {
        if (requestParameters.kommentarBauvorhabenDto === null || requestParameters.kommentarBauvorhabenDto === undefined) {
            throw new runtime.RequiredError('kommentarBauvorhabenDto','Required parameter requestParameters.kommentarBauvorhabenDto was null or undefined when calling updateKommentarForBauvorhaben.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/kommentar/bauvorhaben`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: KommentarBauvorhabenDtoToJSON(requestParameters.kommentarBauvorhabenDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => KommentarBauvorhabenDtoFromJSON(jsonValue));
    }

    /**
     * Aktualisierung eines Kommentars eines Bauvorhabens
     */
    async updateKommentarForBauvorhaben(requestParameters: UpdateKommentarForBauvorhabenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<KommentarBauvorhabenDto> {
        const response = await this.updateKommentarForBauvorhabenRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Aktualisierung eines Kommentars für eine Infrastruktureinrichtung
     */
    async updateKommentarForInfrastruktureinrichtungRaw(requestParameters: UpdateKommentarForInfrastruktureinrichtungRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<KommentarInfrastruktureinrichtungDto>> {
        if (requestParameters.kommentarInfrastruktureinrichtungDto === null || requestParameters.kommentarInfrastruktureinrichtungDto === undefined) {
            throw new runtime.RequiredError('kommentarInfrastruktureinrichtungDto','Required parameter requestParameters.kommentarInfrastruktureinrichtungDto was null or undefined when calling updateKommentarForInfrastruktureinrichtung.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/kommentar/infrastruktureinrichtung`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: KommentarInfrastruktureinrichtungDtoToJSON(requestParameters.kommentarInfrastruktureinrichtungDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => KommentarInfrastruktureinrichtungDtoFromJSON(jsonValue));
    }

    /**
     * Aktualisierung eines Kommentars für eine Infrastruktureinrichtung
     */
    async updateKommentarForInfrastruktureinrichtung(requestParameters: UpdateKommentarForInfrastruktureinrichtungRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<KommentarInfrastruktureinrichtungDto> {
        const response = await this.updateKommentarForInfrastruktureinrichtungRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
