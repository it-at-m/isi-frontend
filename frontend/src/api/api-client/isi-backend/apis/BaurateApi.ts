/* tslint:disable */
/* eslint-disable */
/**
 * ISI Backend API
 * ISI Backend - Serivce für das Informationssystem für soziale Infrastrukturplanung
 *
 * The version of the OpenAPI document: 0.0.1-SNAPSHOT
 * Contact: noreply@mail.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import {
  BaurateDto,
  BaurateDtoFromJSON,
  BaurateDtoToJSON,
  InformationResponseDto,
  InformationResponseDtoFromJSON,
  InformationResponseDtoToJSON,
} from "../models";

export interface CreateBaurateRequest {
  baurateDto: BaurateDto;
}

export interface DeleteBaurateByIdRequest {
  id: string;
}

export interface GetBaurateByIdRequest {
  id: string;
}

export interface UpdateBaurateRequest {
  baurateDto: BaurateDto;
}

/**
 *
 */
export class BaurateApi extends runtime.BaseAPI {
  /**
   * Anlegen einer neuen Baurate
   */
  async createBaurateRaw(
    requestParameters: CreateBaurateRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction
  ): Promise<runtime.ApiResponse<BaurateDto>> {
    if (requestParameters.baurateDto === null || requestParameters.baurateDto === undefined) {
      throw new runtime.RequiredError(
        "baurateDto",
        "Required parameter requestParameters.baurateDto was null or undefined when calling createBaurate."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/baurate`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: BaurateDtoToJSON(requestParameters.baurateDto),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => BaurateDtoFromJSON(jsonValue));
  }

  /**
   * Anlegen einer neuen Baurate
   */
  async createBaurate(
    requestParameters: CreateBaurateRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction
  ): Promise<BaurateDto> {
    const response = await this.createBaurateRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Löschen einer Baurate
   */
  async deleteBaurateByIdRaw(
    requestParameters: DeleteBaurateByIdRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling deleteBaurateById."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/baurate/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        method: "DELETE",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Löschen einer Baurate
   */
  async deleteBaurateById(
    requestParameters: DeleteBaurateByIdRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction
  ): Promise<void> {
    await this.deleteBaurateByIdRaw(requestParameters, initOverrides);
  }

  /**
   * Lesen einer Baurate
   */
  async getBaurateByIdRaw(
    requestParameters: GetBaurateByIdRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction
  ): Promise<runtime.ApiResponse<BaurateDto>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling getBaurateById."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/baurate/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => BaurateDtoFromJSON(jsonValue));
  }

  /**
   * Lesen einer Baurate
   */
  async getBaurateById(
    requestParameters: GetBaurateByIdRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction
  ): Promise<BaurateDto> {
    const response = await this.getBaurateByIdRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Lesen aller Bauraten
   */
  async getBauratenRaw(
    initOverrides?: RequestInit | runtime.InitOverideFunction
  ): Promise<runtime.ApiResponse<Array<BaurateDto>>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/bauraten`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(BaurateDtoFromJSON));
  }

  /**
   * Lesen aller Bauraten
   */
  async getBauraten(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Array<BaurateDto>> {
    const response = await this.getBauratenRaw(initOverrides);
    return await response.value();
  }

  /**
   * Aktualisierung einer Baurate
   */
  async updateBaurateRaw(
    requestParameters: UpdateBaurateRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction
  ): Promise<runtime.ApiResponse<BaurateDto>> {
    if (requestParameters.baurateDto === null || requestParameters.baurateDto === undefined) {
      throw new runtime.RequiredError(
        "baurateDto",
        "Required parameter requestParameters.baurateDto was null or undefined when calling updateBaurate."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/baurate`,
        method: "PUT",
        headers: headerParameters,
        query: queryParameters,
        body: BaurateDtoToJSON(requestParameters.baurateDto),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => BaurateDtoFromJSON(jsonValue));
  }

  /**
   * Aktualisierung einer Baurate
   */
  async updateBaurate(
    requestParameters: UpdateBaurateRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction
  ): Promise<BaurateDto> {
    const response = await this.updateBaurateRaw(requestParameters, initOverrides);
    return await response.value();
  }
}
