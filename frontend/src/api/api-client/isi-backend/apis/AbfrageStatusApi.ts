/* tslint:disable */
/* eslint-disable */
/**
 * ISI Backend API
 * ISI Backend - Serivce für das Informationssystem für soziale Infrastrukturplanung
 *
 * The version of the OpenAPI document: 0.0.1-SNAPSHOT
 * Contact: noreply@mail.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    InformationResponseDto,
    InformationResponseDtoFromJSON,
    InformationResponseDtoToJSON,
    TransitionDto,
    TransitionDtoFromJSON,
    TransitionDtoToJSON,
} from '../models';

export interface AbbrechenInfrastrukturabfrageRequest {
    id: string;
}

export interface AngabenAnpassenInfrastrukturabfrageRequest {
    id: string;
}

export interface BedarfsmeldungErfolgtRequest {
    id: string;
}

export interface FreigabeInfrastrukturabfrageRequest {
    id: string;
}

export interface InBearbeitungSetztungInfrastrukturabfrageRequest {
    id: string;
}

export interface KeineBearbeitungNoetigRequest {
    id: string;
}

export interface KorrigierenInfrastrukturabfrageRequest {
    id: string;
}

export interface SpeichernVonSozialinfrastrukturVersorgungRequest {
    id: string;
}

export interface TransitionsRequest {
    id: string;
}

export interface VerschickenDerStellungnahmeRequest {
    id: string;
}

/**
 * 
 */
export class AbfrageStatusApi extends runtime.BaseAPI {

    /**
     * Setzt eine Infrastrukturabfrage auf den Status ABBRUCH
     */
    async abbrechenInfrastrukturabfrageRaw(requestParameters: AbbrechenInfrastrukturabfrageRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling abbrechenInfrastrukturabfrage.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/infrastruktur-abfrage/{id}/abbrechen`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Setzt eine Infrastrukturabfrage auf den Status ABBRUCH
     */
    async abbrechenInfrastrukturabfrage(requestParameters: AbbrechenInfrastrukturabfrageRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
        await this.abbrechenInfrastrukturabfrageRaw(requestParameters, initOverrides);
    }

    /**
     * Setzt eine Infrastrukturabfrage auf den Status ANGELEGT
     */
    async angabenAnpassenInfrastrukturabfrageRaw(requestParameters: AngabenAnpassenInfrastrukturabfrageRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling angabenAnpassenInfrastrukturabfrage.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/infrastruktur-abfrage/{id}/angabe-anpassen`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Setzt eine Infrastrukturabfrage auf den Status ANGELEGT
     */
    async angabenAnpassenInfrastrukturabfrage(requestParameters: AngabenAnpassenInfrastrukturabfrageRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
        await this.angabenAnpassenInfrastrukturabfrageRaw(requestParameters, initOverrides);
    }

    /**
     * Setzt eine Infrastrukturabfrage auf den Status BEDARFSMELDUNG_ERFOLGT
     */
    async bedarfsmeldungErfolgtRaw(requestParameters: BedarfsmeldungErfolgtRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling bedarfsmeldungErfolgt.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/infrastruktur-abfrage/{id}/bedarfsmeldung-erfolgt`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Setzt eine Infrastrukturabfrage auf den Status BEDARFSMELDUNG_ERFOLGT
     */
    async bedarfsmeldungErfolgt(requestParameters: BedarfsmeldungErfolgtRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
        await this.bedarfsmeldungErfolgtRaw(requestParameters, initOverrides);
    }

    /**
     * Setzt eine Infrastrukturabfrage auf den Status OFFEN
     */
    async freigabeInfrastrukturabfrageRaw(requestParameters: FreigabeInfrastrukturabfrageRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling freigabeInfrastrukturabfrage.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/infrastruktur-abfrage/{id}/freigabe`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Setzt eine Infrastrukturabfrage auf den Status OFFEN
     */
    async freigabeInfrastrukturabfrage(requestParameters: FreigabeInfrastrukturabfrageRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
        await this.freigabeInfrastrukturabfrageRaw(requestParameters, initOverrides);
    }

    /**
     * Setzt eine Infrastrukturabfrage auf den Status IN_BEARBEITUNG_PLAN
     */
    async inBearbeitungSetztungInfrastrukturabfrageRaw(requestParameters: InBearbeitungSetztungInfrastrukturabfrageRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling inBearbeitungSetztungInfrastrukturabfrage.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/infrastruktur-abfrage/{id}/in-bearbeitung-setzten`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Setzt eine Infrastrukturabfrage auf den Status IN_BEARBEITUNG_PLAN
     */
    async inBearbeitungSetztungInfrastrukturabfrage(requestParameters: InBearbeitungSetztungInfrastrukturabfrageRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
        await this.inBearbeitungSetztungInfrastrukturabfrageRaw(requestParameters, initOverrides);
    }

    /**
     * Setzt eine Infrastrukturabfrage auf den Status ERLEDIGT
     */
    async keineBearbeitungNoetigRaw(requestParameters: KeineBearbeitungNoetigRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling keineBearbeitungNoetig.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/infrastruktur-abfrage/{id}/keine-bearbeitung-noetig`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Setzt eine Infrastrukturabfrage auf den Status ERLEDIGT
     */
    async keineBearbeitungNoetig(requestParameters: KeineBearbeitungNoetigRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
        await this.keineBearbeitungNoetigRaw(requestParameters, initOverrides);
    }

    /**
     * Setzt eine Infrastrukturabfrage auf den Status IN_BEARBEITUNG_PLAN
     */
    async korrigierenInfrastrukturabfrageRaw(requestParameters: KorrigierenInfrastrukturabfrageRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling korrigierenInfrastrukturabfrage.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/infrastruktur-abfrage/{id}/korrigieren`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Setzt eine Infrastrukturabfrage auf den Status IN_BEARBEITUNG_PLAN
     */
    async korrigierenInfrastrukturabfrage(requestParameters: KorrigierenInfrastrukturabfrageRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
        await this.korrigierenInfrastrukturabfrageRaw(requestParameters, initOverrides);
    }

    /**
     * Setzt eine Infrastrukturabfrage auf den Status ERLEDIGT
     */
    async speichernVonSozialinfrastrukturVersorgungRaw(requestParameters: SpeichernVonSozialinfrastrukturVersorgungRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling speichernVonSozialinfrastrukturVersorgung.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/infrastruktur-abfrage/{id}/speicher-von-soz-infrastruktur-versorgung`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Setzt eine Infrastrukturabfrage auf den Status ERLEDIGT
     */
    async speichernVonSozialinfrastrukturVersorgung(requestParameters: SpeichernVonSozialinfrastrukturVersorgungRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
        await this.speichernVonSozialinfrastrukturVersorgungRaw(requestParameters, initOverrides);
    }

    /**
     * Hollt alle möglichen StatusAbfrage Transitions auf Basis der Rolle und des akutellen Status
     */
    async transitionsRaw(requestParameters: TransitionsRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Array<TransitionDto>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling transitions.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/infrastruktur-abfrage/{id}/transitions`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TransitionDtoFromJSON));
    }

    /**
     * Hollt alle möglichen StatusAbfrage Transitions auf Basis der Rolle und des akutellen Status
     */
    async transitions(requestParameters: TransitionsRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Array<TransitionDto>> {
        const response = await this.transitionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Setzt eine Infrastrukturabfrage auf den Status IN_BEARBEITUNG_FACHREFERATE
     */
    async verschickenDerStellungnahmeRaw(requestParameters: VerschickenDerStellungnahmeRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling verschickenDerStellungnahme.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/infrastruktur-abfrage/{id}/verschicken-der-stellungnahme`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Setzt eine Infrastrukturabfrage auf den Status IN_BEARBEITUNG_FACHREFERATE
     */
    async verschickenDerStellungnahme(requestParameters: VerschickenDerStellungnahmeRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
        await this.verschickenDerStellungnahmeRaw(requestParameters, initOverrides);
    }

}
