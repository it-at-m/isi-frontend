/* tslint:disable */
/* eslint-disable */
/**
 * ISI Backend API
 * ISI Backend - Serivce für das Informationssystem für soziale Infrastrukturplanung
 *
 * The version of the OpenAPI document: 0.0.1-SNAPSHOT
 * Contact: noreply@mail.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    SearchQueryForEntitiesDto,
    SearchQueryForEntitiesDtoFromJSON,
    SearchQueryForEntitiesDtoToJSON,
    SearchResultsDto,
    SearchResultsDtoFromJSON,
    SearchResultsDtoToJSON,
    SuchwortSuggestionsDto,
    SuchwortSuggestionsDtoFromJSON,
    SuchwortSuggestionsDtoToJSON,
} from '../models';

export interface SearchForEntitiesRequest {
    searchQueryForEntitiesDto: SearchQueryForEntitiesDto;
}

export interface SearchForSearchwordSuggestionRequest {
    searchQueryForEntitiesDto: SearchQueryForEntitiesDto;
}

/**
 * 
 */
export class SucheApi extends runtime.BaseAPI {

    /**
     * Suche nach Entitäten für die im Request-Body gegebene Suchanfrage.
     */
    async searchForEntitiesRaw(requestParameters: SearchForEntitiesRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<SearchResultsDto>> {
        if (requestParameters.searchQueryForEntitiesDto === null || requestParameters.searchQueryForEntitiesDto === undefined) {
            throw new runtime.RequiredError('searchQueryForEntitiesDto','Required parameter requestParameters.searchQueryForEntitiesDto was null or undefined when calling searchForEntities.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/search/entities`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SearchQueryForEntitiesDtoToJSON(requestParameters.searchQueryForEntitiesDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SearchResultsDtoFromJSON(jsonValue));
    }

    /**
     * Suche nach Entitäten für die im Request-Body gegebene Suchanfrage.
     */
    async searchForEntities(requestParameters: SearchForEntitiesRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<SearchResultsDto> {
        const response = await this.searchForEntitiesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Suche nach Suchwortvorschläge für das im Request-Body gegebene Suchwort.
     */
    async searchForSearchwordSuggestionRaw(requestParameters: SearchForSearchwordSuggestionRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<SuchwortSuggestionsDto>> {
        if (requestParameters.searchQueryForEntitiesDto === null || requestParameters.searchQueryForEntitiesDto === undefined) {
            throw new runtime.RequiredError('searchQueryForEntitiesDto','Required parameter requestParameters.searchQueryForEntitiesDto was null or undefined when calling searchForSearchwordSuggestion.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/search/searchword-suggestion`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SearchQueryForEntitiesDtoToJSON(requestParameters.searchQueryForEntitiesDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuchwortSuggestionsDtoFromJSON(jsonValue));
    }

    /**
     * Suche nach Suchwortvorschläge für das im Request-Body gegebene Suchwort.
     */
    async searchForSearchwordSuggestion(requestParameters: SearchForSearchwordSuggestionRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<SuchwortSuggestionsDto> {
        const response = await this.searchForSearchwordSuggestionRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
