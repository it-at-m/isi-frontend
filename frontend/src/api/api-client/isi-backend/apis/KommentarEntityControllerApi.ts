/* tslint:disable */
/* eslint-disable */
/**
 * ISI Backend API
 * ISI Backend - Service für das Informationssystem für soziale Infrastrukturplanung
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: noreply@mail.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  EntityModelKommentar,
  KommentarRequestBody,
  PagedModelEntityModelKommentar,
} from '../models';
import {
    EntityModelKommentarFromJSON,
    EntityModelKommentarToJSON,
    KommentarRequestBodyFromJSON,
    KommentarRequestBodyToJSON,
    PagedModelEntityModelKommentarFromJSON,
    PagedModelEntityModelKommentarToJSON,
} from '../models';

export interface DeleteItemResourceKommentarDeleteRequest {
    id: string;
}

export interface GetCollectionResourceKommentarGet1Request {
    page?: number;
    size?: number;
    sort?: Array<string>;
}

export interface GetItemResourceKommentarGetRequest {
    id: string;
}

export interface PatchItemResourceKommentarPatchRequest {
    id: string;
    kommentarRequestBody: KommentarRequestBody;
}

export interface PostCollectionResourceKommentarPostRequest {
    kommentarRequestBody: KommentarRequestBody;
}

export interface PutItemResourceKommentarPutRequest {
    id: string;
    kommentarRequestBody: KommentarRequestBody;
}

/**
 * 
 */
export class KommentarEntityControllerApi extends runtime.BaseAPI {

    /**
     * delete-kommentar
     */
    async deleteItemResourceKommentarDeleteRaw(requestParameters: DeleteItemResourceKommentarDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteItemResourceKommentarDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/kommentars/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * delete-kommentar
     */
    async deleteItemResourceKommentarDelete(requestParameters: DeleteItemResourceKommentarDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteItemResourceKommentarDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * get-kommentar
     */
    async getCollectionResourceKommentarGet1Raw(requestParameters: GetCollectionResourceKommentarGet1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagedModelEntityModelKommentar>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        if (requestParameters.sort) {
            queryParameters['sort'] = requestParameters.sort;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/kommentars`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PagedModelEntityModelKommentarFromJSON(jsonValue));
    }

    /**
     * get-kommentar
     */
    async getCollectionResourceKommentarGet1(requestParameters: GetCollectionResourceKommentarGet1Request = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagedModelEntityModelKommentar> {
        const response = await this.getCollectionResourceKommentarGet1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * get-kommentar
     */
    async getItemResourceKommentarGetRaw(requestParameters: GetItemResourceKommentarGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelKommentar>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getItemResourceKommentarGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/kommentars/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EntityModelKommentarFromJSON(jsonValue));
    }

    /**
     * get-kommentar
     */
    async getItemResourceKommentarGet(requestParameters: GetItemResourceKommentarGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelKommentar> {
        const response = await this.getItemResourceKommentarGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * patch-kommentar
     */
    async patchItemResourceKommentarPatchRaw(requestParameters: PatchItemResourceKommentarPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelKommentar>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling patchItemResourceKommentarPatch.');
        }

        if (requestParameters.kommentarRequestBody === null || requestParameters.kommentarRequestBody === undefined) {
            throw new runtime.RequiredError('kommentarRequestBody','Required parameter requestParameters.kommentarRequestBody was null or undefined when calling patchItemResourceKommentarPatch.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/kommentars/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: KommentarRequestBodyToJSON(requestParameters.kommentarRequestBody),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EntityModelKommentarFromJSON(jsonValue));
    }

    /**
     * patch-kommentar
     */
    async patchItemResourceKommentarPatch(requestParameters: PatchItemResourceKommentarPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelKommentar> {
        const response = await this.patchItemResourceKommentarPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * create-kommentar
     */
    async postCollectionResourceKommentarPostRaw(requestParameters: PostCollectionResourceKommentarPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelKommentar>> {
        if (requestParameters.kommentarRequestBody === null || requestParameters.kommentarRequestBody === undefined) {
            throw new runtime.RequiredError('kommentarRequestBody','Required parameter requestParameters.kommentarRequestBody was null or undefined when calling postCollectionResourceKommentarPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/kommentars`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: KommentarRequestBodyToJSON(requestParameters.kommentarRequestBody),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EntityModelKommentarFromJSON(jsonValue));
    }

    /**
     * create-kommentar
     */
    async postCollectionResourceKommentarPost(requestParameters: PostCollectionResourceKommentarPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelKommentar> {
        const response = await this.postCollectionResourceKommentarPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * update-kommentar
     */
    async putItemResourceKommentarPutRaw(requestParameters: PutItemResourceKommentarPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelKommentar>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling putItemResourceKommentarPut.');
        }

        if (requestParameters.kommentarRequestBody === null || requestParameters.kommentarRequestBody === undefined) {
            throw new runtime.RequiredError('kommentarRequestBody','Required parameter requestParameters.kommentarRequestBody was null or undefined when calling putItemResourceKommentarPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/kommentars/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: KommentarRequestBodyToJSON(requestParameters.kommentarRequestBody),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EntityModelKommentarFromJSON(jsonValue));
    }

    /**
     * update-kommentar
     */
    async putItemResourceKommentarPut(requestParameters: PutItemResourceKommentarPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelKommentar> {
        const response = await this.putItemResourceKommentarPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
