/* tslint:disable */
/* eslint-disable */
/**
 * ISI Backend API
 * ISI Backend - Service für das Informationssystem für soziale Infrastrukturplanung
 *
 * The version of the OpenAPI document: 1.4.0
 * Contact: noreply@mail.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AbfrageRequestBody,
  EntityModelAbfrage,
  PagedModelEntityModelAbfrage,
} from '../models';
import {
    AbfrageRequestBodyFromJSON,
    AbfrageRequestBodyToJSON,
    EntityModelAbfrageFromJSON,
    EntityModelAbfrageToJSON,
    PagedModelEntityModelAbfrageFromJSON,
    PagedModelEntityModelAbfrageToJSON,
} from '../models';

export interface DeleteItemResourceAbfrageDeleteRequest {
    id: string;
}

export interface GetCollectionResourceAbfrageGet1Request {
    page?: number;
    size?: number;
    sort?: Array<string>;
}

export interface GetItemResourceAbfrageGetRequest {
    id: string;
}

export interface PatchItemResourceAbfragePatchRequest {
    id: string;
    abfrageRequestBody: AbfrageRequestBody;
}

export interface PostCollectionResourceAbfragePostRequest {
    abfrageRequestBody: AbfrageRequestBody;
}

export interface PutItemResourceAbfragePutRequest {
    id: string;
    abfrageRequestBody: AbfrageRequestBody;
}

/**
 * 
 */
export class AbfrageEntityControllerApi extends runtime.BaseAPI {

    /**
     * delete-abfrage
     */
    async deleteItemResourceAbfrageDeleteRaw(requestParameters: DeleteItemResourceAbfrageDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteItemResourceAbfrageDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/abfrages/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * delete-abfrage
     */
    async deleteItemResourceAbfrageDelete(requestParameters: DeleteItemResourceAbfrageDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteItemResourceAbfrageDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * get-abfrage
     */
    async getCollectionResourceAbfrageGet1Raw(requestParameters: GetCollectionResourceAbfrageGet1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagedModelEntityModelAbfrage>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        if (requestParameters.sort) {
            queryParameters['sort'] = requestParameters.sort;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/abfrages`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PagedModelEntityModelAbfrageFromJSON(jsonValue));
    }

    /**
     * get-abfrage
     */
    async getCollectionResourceAbfrageGet1(requestParameters: GetCollectionResourceAbfrageGet1Request = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagedModelEntityModelAbfrage> {
        const response = await this.getCollectionResourceAbfrageGet1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * get-abfrage
     */
    async getItemResourceAbfrageGetRaw(requestParameters: GetItemResourceAbfrageGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelAbfrage>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getItemResourceAbfrageGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/abfrages/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EntityModelAbfrageFromJSON(jsonValue));
    }

    /**
     * get-abfrage
     */
    async getItemResourceAbfrageGet(requestParameters: GetItemResourceAbfrageGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelAbfrage> {
        const response = await this.getItemResourceAbfrageGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * patch-abfrage
     */
    async patchItemResourceAbfragePatchRaw(requestParameters: PatchItemResourceAbfragePatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelAbfrage>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling patchItemResourceAbfragePatch.');
        }

        if (requestParameters.abfrageRequestBody === null || requestParameters.abfrageRequestBody === undefined) {
            throw new runtime.RequiredError('abfrageRequestBody','Required parameter requestParameters.abfrageRequestBody was null or undefined when calling patchItemResourceAbfragePatch.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/abfrages/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: AbfrageRequestBodyToJSON(requestParameters.abfrageRequestBody),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EntityModelAbfrageFromJSON(jsonValue));
    }

    /**
     * patch-abfrage
     */
    async patchItemResourceAbfragePatch(requestParameters: PatchItemResourceAbfragePatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelAbfrage> {
        const response = await this.patchItemResourceAbfragePatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * create-abfrage
     */
    async postCollectionResourceAbfragePostRaw(requestParameters: PostCollectionResourceAbfragePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelAbfrage>> {
        if (requestParameters.abfrageRequestBody === null || requestParameters.abfrageRequestBody === undefined) {
            throw new runtime.RequiredError('abfrageRequestBody','Required parameter requestParameters.abfrageRequestBody was null or undefined when calling postCollectionResourceAbfragePost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/abfrages`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AbfrageRequestBodyToJSON(requestParameters.abfrageRequestBody),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EntityModelAbfrageFromJSON(jsonValue));
    }

    /**
     * create-abfrage
     */
    async postCollectionResourceAbfragePost(requestParameters: PostCollectionResourceAbfragePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelAbfrage> {
        const response = await this.postCollectionResourceAbfragePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * update-abfrage
     */
    async putItemResourceAbfragePutRaw(requestParameters: PutItemResourceAbfragePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelAbfrage>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling putItemResourceAbfragePut.');
        }

        if (requestParameters.abfrageRequestBody === null || requestParameters.abfrageRequestBody === undefined) {
            throw new runtime.RequiredError('abfrageRequestBody','Required parameter requestParameters.abfrageRequestBody was null or undefined when calling putItemResourceAbfragePut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/abfrages/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AbfrageRequestBodyToJSON(requestParameters.abfrageRequestBody),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EntityModelAbfrageFromJSON(jsonValue));
    }

    /**
     * update-abfrage
     */
    async putItemResourceAbfragePut(requestParameters: PutItemResourceAbfragePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelAbfrage> {
        const response = await this.putItemResourceAbfragePutRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
