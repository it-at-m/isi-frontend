/* tslint:disable */
/* eslint-disable */
/**
 * ISI Backend API
 * ISI Backend - Serivce für das Informationssystem für soziale Infrastrukturplanung
 *
 * The version of the OpenAPI document: 0.0.1-SNAPSHOT
 * Contact: noreply@mail.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    BauvorhabenDto,
    BauvorhabenDtoFromJSON,
    BauvorhabenDtoToJSON,
    InformationResponseDto,
    InformationResponseDtoFromJSON,
    InformationResponseDtoToJSON,
} from '../models';

export interface CreateBauvorhabenRequest {
    bauvorhabenDto: BauvorhabenDto;
}

export interface DeleteBauvorhabenRequest {
    id: string;
}

export interface GetBauvorhabenByIdRequest {
    id: string;
}

export interface UpdateBauvorhabenRequest {
    bauvorhabenDto: BauvorhabenDto;
}

/**
 * 
 */
export class BauvorhabenApi extends runtime.BaseAPI {

    /**
     * Anlegen eines neuen Bauvorhabens
     */
    async createBauvorhabenRaw(requestParameters: CreateBauvorhabenRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<BauvorhabenDto>> {
        if (requestParameters.bauvorhabenDto === null || requestParameters.bauvorhabenDto === undefined) {
            throw new runtime.RequiredError('bauvorhabenDto','Required parameter requestParameters.bauvorhabenDto was null or undefined when calling createBauvorhaben.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/bauvorhaben`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BauvorhabenDtoToJSON(requestParameters.bauvorhabenDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BauvorhabenDtoFromJSON(jsonValue));
    }

    /**
     * Anlegen eines neuen Bauvorhabens
     */
    async createBauvorhaben(requestParameters: CreateBauvorhabenRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<BauvorhabenDto> {
        const response = await this.createBauvorhabenRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Löschen eines Bauvorhabens
     */
    async deleteBauvorhabenRaw(requestParameters: DeleteBauvorhabenRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteBauvorhaben.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/bauvorhaben/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Löschen eines Bauvorhabens
     */
    async deleteBauvorhaben(requestParameters: DeleteBauvorhabenRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
        await this.deleteBauvorhabenRaw(requestParameters, initOverrides);
    }

    /**
     * Das Ergebnis wird nach der Größe des Grundstückes absteigend sortiert
     * Lade alle Bauvorhaben
     */
    async getBauvorhabenRaw(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Array<BauvorhabenDto>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/bauvorhaben`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(BauvorhabenDtoFromJSON));
    }

    /**
     * Das Ergebnis wird nach der Größe des Grundstückes absteigend sortiert
     * Lade alle Bauvorhaben
     */
    async getBauvorhaben(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Array<BauvorhabenDto>> {
        const response = await this.getBauvorhabenRaw(initOverrides);
        return await response.value();
    }

    /**
     * Lesen eines Bauvorhabens
     */
    async getBauvorhabenByIdRaw(requestParameters: GetBauvorhabenByIdRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<BauvorhabenDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getBauvorhabenById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/bauvorhaben/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BauvorhabenDtoFromJSON(jsonValue));
    }

    /**
     * Lesen eines Bauvorhabens
     */
    async getBauvorhabenById(requestParameters: GetBauvorhabenByIdRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<BauvorhabenDto> {
        const response = await this.getBauvorhabenByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Aktualisierung eines Bauvorhabens
     */
    async updateBauvorhabenRaw(requestParameters: UpdateBauvorhabenRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<BauvorhabenDto>> {
        if (requestParameters.bauvorhabenDto === null || requestParameters.bauvorhabenDto === undefined) {
            throw new runtime.RequiredError('bauvorhabenDto','Required parameter requestParameters.bauvorhabenDto was null or undefined when calling updateBauvorhaben.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/bauvorhaben`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: BauvorhabenDtoToJSON(requestParameters.bauvorhabenDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BauvorhabenDtoFromJSON(jsonValue));
    }

    /**
     * Aktualisierung eines Bauvorhabens
     */
    async updateBauvorhaben(requestParameters: UpdateBauvorhabenRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<BauvorhabenDto> {
        const response = await this.updateBauvorhabenRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
