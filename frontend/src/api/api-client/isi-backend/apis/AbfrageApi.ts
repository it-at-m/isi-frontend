/* tslint:disable */
/* eslint-disable */
/**
 * ISI Backend API
 * ISI Backend - Serivce für das Informationssystem für soziale Infrastrukturplanung
 *
 * The version of the OpenAPI document: 0.0.1-SNAPSHOT
 * Contact: noreply@mail.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    AbfrageerstellungInfrastrukturabfrageAngelegtDto,
    AbfrageerstellungInfrastrukturabfrageAngelegtDtoFromJSON,
    AbfrageerstellungInfrastrukturabfrageAngelegtDtoToJSON,
    InformationResponseDto,
    InformationResponseDtoFromJSON,
    InformationResponseDtoToJSON,
    InfrastrukturabfrageDto,
    InfrastrukturabfrageDtoFromJSON,
    InfrastrukturabfrageDtoToJSON,
    SachbearbeitungInfrastrukturabfrageOffenInBearbeitungDto,
    SachbearbeitungInfrastrukturabfrageOffenInBearbeitungDtoFromJSON,
    SachbearbeitungInfrastrukturabfrageOffenInBearbeitungDtoToJSON,
} from '../models';

export interface CreateInfrastrukturabfrageRequest {
    abfrageerstellungInfrastrukturabfrageAngelegtDto: AbfrageerstellungInfrastrukturabfrageAngelegtDto;
}

export interface DeleteInfrastrukturabfrageByIdRequest {
    id: string;
}

export interface GetInfrastrukturabfrageByIdRequest {
    id: string;
}

export interface PatchAbfrageAngelegtRequest {
    abfrageerstellungInfrastrukturabfrageAngelegtDto: AbfrageerstellungInfrastrukturabfrageAngelegtDto;
}

export interface PatchAbfrageInBearbeitungSachbearbeitungRequest {
    sachbearbeitungInfrastrukturabfrageOffenInBearbeitungDto: SachbearbeitungInfrastrukturabfrageOffenInBearbeitungDto;
}

/**
 * 
 */
export class AbfrageApi extends runtime.BaseAPI {

    /**
     * Anlegen einer neuen Infrastrukturabfrage
     */
    async createInfrastrukturabfrageRaw(requestParameters: CreateInfrastrukturabfrageRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<InfrastrukturabfrageDto>> {
        if (requestParameters.abfrageerstellungInfrastrukturabfrageAngelegtDto === null || requestParameters.abfrageerstellungInfrastrukturabfrageAngelegtDto === undefined) {
            throw new runtime.RequiredError('abfrageerstellungInfrastrukturabfrageAngelegtDto','Required parameter requestParameters.abfrageerstellungInfrastrukturabfrageAngelegtDto was null or undefined when calling createInfrastrukturabfrage.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/infrastruktur-abfragen`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AbfrageerstellungInfrastrukturabfrageAngelegtDtoToJSON(requestParameters.abfrageerstellungInfrastrukturabfrageAngelegtDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InfrastrukturabfrageDtoFromJSON(jsonValue));
    }

    /**
     * Anlegen einer neuen Infrastrukturabfrage
     */
    async createInfrastrukturabfrage(requestParameters: CreateInfrastrukturabfrageRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<InfrastrukturabfrageDto> {
        const response = await this.createInfrastrukturabfrageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Löschen einer Infrastrukturabfrage
     */
    async deleteInfrastrukturabfrageByIdRaw(requestParameters: DeleteInfrastrukturabfrageByIdRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteInfrastrukturabfrageById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/infrastruktur-abfragen/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Löschen einer Infrastrukturabfrage
     */
    async deleteInfrastrukturabfrageById(requestParameters: DeleteInfrastrukturabfrageByIdRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
        await this.deleteInfrastrukturabfrageByIdRaw(requestParameters, initOverrides);
    }

    /**
     * Lesen einer Infrastrukturabfrage
     */
    async getInfrastrukturabfrageByIdRaw(requestParameters: GetInfrastrukturabfrageByIdRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<InfrastrukturabfrageDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getInfrastrukturabfrageById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/infrastruktur-abfragen/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InfrastrukturabfrageDtoFromJSON(jsonValue));
    }

    /**
     * Lesen einer Infrastrukturabfrage
     */
    async getInfrastrukturabfrageById(requestParameters: GetInfrastrukturabfrageByIdRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<InfrastrukturabfrageDto> {
        const response = await this.getInfrastrukturabfrageByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Das Ergebnis wird nach Frist Stellungnahme absteigend sortiert
     * Lade alle Infrastrukturabfragen
     */
    async getInfrastrukturabfragenRaw(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Array<InfrastrukturabfrageDto>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/infrastruktur-abfragen`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(InfrastrukturabfrageDtoFromJSON));
    }

    /**
     * Das Ergebnis wird nach Frist Stellungnahme absteigend sortiert
     * Lade alle Infrastrukturabfragen
     */
    async getInfrastrukturabfragen(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Array<InfrastrukturabfrageDto>> {
        const response = await this.getInfrastrukturabfragenRaw(initOverrides);
        return await response.value();
    }

    /**
     * Aktualisierung einer Infrastrukturabfrage im Status ANGELEGT.
     */
    async patchAbfrageAngelegtRaw(requestParameters: PatchAbfrageAngelegtRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<InfrastrukturabfrageDto>> {
        if (requestParameters.abfrageerstellungInfrastrukturabfrageAngelegtDto === null || requestParameters.abfrageerstellungInfrastrukturabfrageAngelegtDto === undefined) {
            throw new runtime.RequiredError('abfrageerstellungInfrastrukturabfrageAngelegtDto','Required parameter requestParameters.abfrageerstellungInfrastrukturabfrageAngelegtDto was null or undefined when calling patchAbfrageAngelegt.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/infrastruktur-abfragen/angelegt`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: AbfrageerstellungInfrastrukturabfrageAngelegtDtoToJSON(requestParameters.abfrageerstellungInfrastrukturabfrageAngelegtDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InfrastrukturabfrageDtoFromJSON(jsonValue));
    }

    /**
     * Aktualisierung einer Infrastrukturabfrage im Status ANGELEGT.
     */
    async patchAbfrageAngelegt(requestParameters: PatchAbfrageAngelegtRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<InfrastrukturabfrageDto> {
        const response = await this.patchAbfrageAngelegtRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Aktualisierung einer Infrastrukturabfrage im Status OFFEN oder IN_BEARBEITUNG_SACHBEARBEITUNG.
     */
    async patchAbfrageInBearbeitungSachbearbeitungRaw(requestParameters: PatchAbfrageInBearbeitungSachbearbeitungRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<InfrastrukturabfrageDto>> {
        if (requestParameters.sachbearbeitungInfrastrukturabfrageOffenInBearbeitungDto === null || requestParameters.sachbearbeitungInfrastrukturabfrageOffenInBearbeitungDto === undefined) {
            throw new runtime.RequiredError('sachbearbeitungInfrastrukturabfrageOffenInBearbeitungDto','Required parameter requestParameters.sachbearbeitungInfrastrukturabfrageOffenInBearbeitungDto was null or undefined when calling patchAbfrageInBearbeitungSachbearbeitung.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/infrastruktur-abfragen/in-bearbeitung-offen`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: SachbearbeitungInfrastrukturabfrageOffenInBearbeitungDtoToJSON(requestParameters.sachbearbeitungInfrastrukturabfrageOffenInBearbeitungDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InfrastrukturabfrageDtoFromJSON(jsonValue));
    }

    /**
     * Aktualisierung einer Infrastrukturabfrage im Status OFFEN oder IN_BEARBEITUNG_SACHBEARBEITUNG.
     */
    async patchAbfrageInBearbeitungSachbearbeitung(requestParameters: PatchAbfrageInBearbeitungSachbearbeitungRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<InfrastrukturabfrageDto> {
        const response = await this.patchAbfrageInBearbeitungSachbearbeitungRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
