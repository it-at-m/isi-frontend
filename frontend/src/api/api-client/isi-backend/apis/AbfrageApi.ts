/* tslint:disable */
/* eslint-disable */
/**
 * ISI Backend API
 * ISI Backend - Serivce für das Informationssystem für soziale Infrastrukturplanung
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: noreply@mail.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    InformationResponseDto,
    InformationResponseDtoFromJSON,
    InformationResponseDtoToJSON,
    InfrastrukturabfrageAngelegtDto,
    InfrastrukturabfrageAngelegtDtoFromJSON,
    InfrastrukturabfrageAngelegtDtoToJSON,
    InfrastrukturabfrageDto,
    InfrastrukturabfrageDtoFromJSON,
    InfrastrukturabfrageDtoToJSON,
    InfrastrukturabfrageInBearbeitungSachbearbeitungDto,
    InfrastrukturabfrageInBearbeitungSachbearbeitungDtoFromJSON,
    InfrastrukturabfrageInBearbeitungSachbearbeitungDtoToJSON,
} from '../models';

export interface CreateInfrastrukturabfrageRequest {
    infrastrukturabfrageAngelegtDto: InfrastrukturabfrageAngelegtDto;
}

export interface DeleteInfrastrukturabfrageByIdRequest {
    id: string;
}

export interface GetInfrastrukturabfrageByIdRequest {
    id: string;
}

export interface PatchAbfrageAngelegtRequest {
    id: string;
    infrastrukturabfrageAngelegtDto: InfrastrukturabfrageAngelegtDto;
}

export interface PatchAbfrageInBearbeitungSachbearbeitungRequest {
    id: string;
    infrastrukturabfrageInBearbeitungSachbearbeitungDto: InfrastrukturabfrageInBearbeitungSachbearbeitungDto;
}

export interface PutChangeAbfragevarianteRelevantRequest {
    abfrageId: string;
    abfragevarianteId: string;
}

/**
 * 
 */
export class AbfrageApi extends runtime.BaseAPI {

    /**
     * Anlegen einer neuen Infrastrukturabfrage
     */
    async createInfrastrukturabfrageRaw(requestParameters: CreateInfrastrukturabfrageRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<InfrastrukturabfrageDto>> {
        if (requestParameters.infrastrukturabfrageAngelegtDto === null || requestParameters.infrastrukturabfrageAngelegtDto === undefined) {
            throw new runtime.RequiredError('infrastrukturabfrageAngelegtDto','Required parameter requestParameters.infrastrukturabfrageAngelegtDto was null or undefined when calling createInfrastrukturabfrage.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/infrastruktur-abfragen`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InfrastrukturabfrageAngelegtDtoToJSON(requestParameters.infrastrukturabfrageAngelegtDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InfrastrukturabfrageDtoFromJSON(jsonValue));
    }

    /**
     * Anlegen einer neuen Infrastrukturabfrage
     */
    async createInfrastrukturabfrage(requestParameters: CreateInfrastrukturabfrageRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<InfrastrukturabfrageDto> {
        const response = await this.createInfrastrukturabfrageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Löschen einer Infrastrukturabfrage
     */
    async deleteInfrastrukturabfrageByIdRaw(requestParameters: DeleteInfrastrukturabfrageByIdRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteInfrastrukturabfrageById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/infrastruktur-abfragen/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Löschen einer Infrastrukturabfrage
     */
    async deleteInfrastrukturabfrageById(requestParameters: DeleteInfrastrukturabfrageByIdRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
        await this.deleteInfrastrukturabfrageByIdRaw(requestParameters, initOverrides);
    }

    /**
     * Lesen einer Infrastrukturabfrage
     */
    async getInfrastrukturabfrageByIdRaw(requestParameters: GetInfrastrukturabfrageByIdRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<InfrastrukturabfrageDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getInfrastrukturabfrageById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/infrastruktur-abfragen/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InfrastrukturabfrageDtoFromJSON(jsonValue));
    }

    /**
     * Lesen einer Infrastrukturabfrage
     */
    async getInfrastrukturabfrageById(requestParameters: GetInfrastrukturabfrageByIdRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<InfrastrukturabfrageDto> {
        const response = await this.getInfrastrukturabfrageByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Aktualisierung einer Infrastrukturabfrage im Status ANGELEGT.
     */
    async patchAbfrageAngelegtRaw(requestParameters: PatchAbfrageAngelegtRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<InfrastrukturabfrageDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling patchAbfrageAngelegt.');
        }

        if (requestParameters.infrastrukturabfrageAngelegtDto === null || requestParameters.infrastrukturabfrageAngelegtDto === undefined) {
            throw new runtime.RequiredError('infrastrukturabfrageAngelegtDto','Required parameter requestParameters.infrastrukturabfrageAngelegtDto was null or undefined when calling patchAbfrageAngelegt.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/infrastruktur-abfragen/abfrage-angelegt/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: InfrastrukturabfrageAngelegtDtoToJSON(requestParameters.infrastrukturabfrageAngelegtDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InfrastrukturabfrageDtoFromJSON(jsonValue));
    }

    /**
     * Aktualisierung einer Infrastrukturabfrage im Status ANGELEGT.
     */
    async patchAbfrageAngelegt(requestParameters: PatchAbfrageAngelegtRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<InfrastrukturabfrageDto> {
        const response = await this.patchAbfrageAngelegtRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Aktualisierung einer Infrastrukturabfrage im Status IN_BEARBEITUNG_SACHBEARBEITUNG.
     */
    async patchAbfrageInBearbeitungSachbearbeitungRaw(requestParameters: PatchAbfrageInBearbeitungSachbearbeitungRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<InfrastrukturabfrageDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling patchAbfrageInBearbeitungSachbearbeitung.');
        }

        if (requestParameters.infrastrukturabfrageInBearbeitungSachbearbeitungDto === null || requestParameters.infrastrukturabfrageInBearbeitungSachbearbeitungDto === undefined) {
            throw new runtime.RequiredError('infrastrukturabfrageInBearbeitungSachbearbeitungDto','Required parameter requestParameters.infrastrukturabfrageInBearbeitungSachbearbeitungDto was null or undefined when calling patchAbfrageInBearbeitungSachbearbeitung.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/infrastruktur-abfragen/abfrage-in-bearbeitung-sachbearbeitung/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: InfrastrukturabfrageInBearbeitungSachbearbeitungDtoToJSON(requestParameters.infrastrukturabfrageInBearbeitungSachbearbeitungDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InfrastrukturabfrageDtoFromJSON(jsonValue));
    }

    /**
     * Aktualisierung einer Infrastrukturabfrage im Status IN_BEARBEITUNG_SACHBEARBEITUNG.
     */
    async patchAbfrageInBearbeitungSachbearbeitung(requestParameters: PatchAbfrageInBearbeitungSachbearbeitungRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<InfrastrukturabfrageDto> {
        const response = await this.patchAbfrageInBearbeitungSachbearbeitungRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Markiert für Abfragen im Status IN_BEARBEITUNG_SACHBEARBEITUNG eine Abfragevariante als relevant, fall diese noch nicht relevant ist.Ist die Abfragevariante bereits als relevant markiert, wird der Status auf nicht relevant gesetzt.Eine Relevantsetzung kann nur vorgenommen werden, wenn die Abfrage ein Bauvorhaben referenziertund noch keine andere Abfrage als relevant markiert wurde.
     */
    async putChangeAbfragevarianteRelevantRaw(requestParameters: PutChangeAbfragevarianteRelevantRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<InfrastrukturabfrageDto>> {
        if (requestParameters.abfrageId === null || requestParameters.abfrageId === undefined) {
            throw new runtime.RequiredError('abfrageId','Required parameter requestParameters.abfrageId was null or undefined when calling putChangeAbfragevarianteRelevant.');
        }

        if (requestParameters.abfragevarianteId === null || requestParameters.abfragevarianteId === undefined) {
            throw new runtime.RequiredError('abfragevarianteId','Required parameter requestParameters.abfragevarianteId was null or undefined when calling putChangeAbfragevarianteRelevant.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/infrastruktur-abfragen/abfrage/{abfrageId}/abfragevariante/change-relevant/{abfragevarianteId}`.replace(`{${"abfrageId"}}`, encodeURIComponent(String(requestParameters.abfrageId))).replace(`{${"abfragevarianteId"}}`, encodeURIComponent(String(requestParameters.abfragevarianteId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InfrastrukturabfrageDtoFromJSON(jsonValue));
    }

    /**
     * Markiert für Abfragen im Status IN_BEARBEITUNG_SACHBEARBEITUNG eine Abfragevariante als relevant, fall diese noch nicht relevant ist.Ist die Abfragevariante bereits als relevant markiert, wird der Status auf nicht relevant gesetzt.Eine Relevantsetzung kann nur vorgenommen werden, wenn die Abfrage ein Bauvorhaben referenziertund noch keine andere Abfrage als relevant markiert wurde.
     */
    async putChangeAbfragevarianteRelevant(requestParameters: PutChangeAbfragevarianteRelevantRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<InfrastrukturabfrageDto> {
        const response = await this.putChangeAbfragevarianteRelevantRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
