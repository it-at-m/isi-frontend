/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  FilepathDto,
  InformationResponseDto,
  PresignedUrlDto,
} from '../models';
import {
    FilepathDtoFromJSON,
    FilepathDtoToJSON,
    InformationResponseDtoFromJSON,
    InformationResponseDtoToJSON,
    PresignedUrlDtoFromJSON,
    PresignedUrlDtoToJSON,
} from '../models';

export interface GetFileRequest {
    pathToFile: string;
}

export interface SaveFileRequest {
    filepathDto: FilepathDto;
}

/**
 * 
 */
export class DateihandlingApi extends runtime.BaseAPI {

    /**
     * Die Presigned-Url ist vom Aufrufer mit der Http-Methode GET zu verwenden.
     * Stellt die Presigned-Url zum Holen einer Datei zur Verf端gung.
     */
    async getFileRaw(requestParameters: GetFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PresignedUrlDto>> {
        if (requestParameters.pathToFile === null || requestParameters.pathToFile === undefined) {
            throw new runtime.RequiredError('pathToFile','Required parameter requestParameters.pathToFile was null or undefined when calling getFile.');
        }

        const queryParameters: any = {};

        if (requestParameters.pathToFile !== undefined) {
            queryParameters['pathToFile'] = requestParameters.pathToFile;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/presigned-url`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PresignedUrlDtoFromJSON(jsonValue));
    }

    /**
     * Die Presigned-Url ist vom Aufrufer mit der Http-Methode GET zu verwenden.
     * Stellt die Presigned-Url zum Holen einer Datei zur Verf端gung.
     */
    async getFile(requestParameters: GetFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PresignedUrlDto> {
        const response = await this.getFileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Die Presigned-Url ist vom Aufrufer mit der Http-Methode PUT zu verwenden.
     * Stellt die Presigned-Url zum Initialen Speichern einer Datei zur Verf端gung.
     */
    async saveFileRaw(requestParameters: SaveFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PresignedUrlDto>> {
        if (requestParameters.filepathDto === null || requestParameters.filepathDto === undefined) {
            throw new runtime.RequiredError('filepathDto','Required parameter requestParameters.filepathDto was null or undefined when calling saveFile.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/presigned-url`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FilepathDtoToJSON(requestParameters.filepathDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PresignedUrlDtoFromJSON(jsonValue));
    }

    /**
     * Die Presigned-Url ist vom Aufrufer mit der Http-Methode PUT zu verwenden.
     * Stellt die Presigned-Url zum Initialen Speichern einer Datei zur Verf端gung.
     */
    async saveFile(requestParameters: SaveFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PresignedUrlDto> {
        const response = await this.saveFileRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
