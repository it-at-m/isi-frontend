/* tslint:disable */
/* eslint-disable */
/**
 * ISI Backend API
 * ISI Backend - Service für das Informationssystem für soziale Infrastrukturplanung
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: noreply@mail.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    FilepathDto,
    FilepathDtoFromJSON,
    FilepathDtoToJSON,
    InformationResponseDto,
    InformationResponseDtoFromJSON,
    InformationResponseDtoToJSON,
    MimeTypeInformationDto,
    MimeTypeInformationDtoFromJSON,
    MimeTypeInformationDtoToJSON,
} from '../models';

export interface ExtractMediaTypeInformationForAllowedMediaTypeRequest {
    filepathDto: FilepathDto;
}

/**
 * 
 */
export class MimeTypeApi extends runtime.BaseAPI {

    /**
     * Handelt es sich um einen ungültigen Mime-Type wird die referenzierte Datei vom S3-Storage gelöscht.
     * Stellt die Mime-Type-Information für die im Parameter referenzierte und im S3-Storage befindliche Datei zur Verfügung.
     */
    async extractMediaTypeInformationForAllowedMediaTypeRaw(requestParameters: ExtractMediaTypeInformationForAllowedMediaTypeRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<MimeTypeInformationDto>> {
        if (requestParameters.filepathDto === null || requestParameters.filepathDto === undefined) {
            throw new runtime.RequiredError('filepathDto','Required parameter requestParameters.filepathDto was null or undefined when calling extractMediaTypeInformationForAllowedMediaType.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/mime-type`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FilepathDtoToJSON(requestParameters.filepathDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MimeTypeInformationDtoFromJSON(jsonValue));
    }

    /**
     * Handelt es sich um einen ungültigen Mime-Type wird die referenzierte Datei vom S3-Storage gelöscht.
     * Stellt die Mime-Type-Information für die im Parameter referenzierte und im S3-Storage befindliche Datei zur Verfügung.
     */
    async extractMediaTypeInformationForAllowedMediaType(requestParameters: ExtractMediaTypeInformationForAllowedMediaTypeRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<MimeTypeInformationDto> {
        const response = await this.extractMediaTypeInformationForAllowedMediaTypeRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
