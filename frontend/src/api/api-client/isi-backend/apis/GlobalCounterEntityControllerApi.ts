/* tslint:disable */
/* eslint-disable */
/**
 * ISI Backend API
 * ISI Backend - Service für das Informationssystem für soziale Infrastrukturplanung
 *
 * The version of the OpenAPI document: 1.4.0
 * Contact: noreply@mail.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  EntityModelGlobalCounter,
  GlobalCounterRequestBody,
  PagedModelEntityModelGlobalCounter,
} from '../models';
import {
    EntityModelGlobalCounterFromJSON,
    EntityModelGlobalCounterToJSON,
    GlobalCounterRequestBodyFromJSON,
    GlobalCounterRequestBodyToJSON,
    PagedModelEntityModelGlobalCounterFromJSON,
    PagedModelEntityModelGlobalCounterToJSON,
} from '../models';

export interface DeleteItemResourceGlobalcounterDeleteRequest {
    id: string;
}

export interface GetCollectionResourceGlobalcounterGet1Request {
    page?: number;
    size?: number;
    sort?: Array<string>;
}

export interface GetItemResourceGlobalcounterGetRequest {
    id: string;
}

export interface PatchItemResourceGlobalcounterPatchRequest {
    id: string;
    globalCounterRequestBody: GlobalCounterRequestBody;
}

export interface PostCollectionResourceGlobalcounterPostRequest {
    globalCounterRequestBody: GlobalCounterRequestBody;
}

export interface PutItemResourceGlobalcounterPutRequest {
    id: string;
    globalCounterRequestBody: GlobalCounterRequestBody;
}

/**
 * 
 */
export class GlobalCounterEntityControllerApi extends runtime.BaseAPI {

    /**
     * delete-globalcounter
     */
    async deleteItemResourceGlobalcounterDeleteRaw(requestParameters: DeleteItemResourceGlobalcounterDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteItemResourceGlobalcounterDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/globalCounters/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * delete-globalcounter
     */
    async deleteItemResourceGlobalcounterDelete(requestParameters: DeleteItemResourceGlobalcounterDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteItemResourceGlobalcounterDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * get-globalcounter
     */
    async getCollectionResourceGlobalcounterGet1Raw(requestParameters: GetCollectionResourceGlobalcounterGet1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagedModelEntityModelGlobalCounter>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        if (requestParameters.sort) {
            queryParameters['sort'] = requestParameters.sort;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/globalCounters`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PagedModelEntityModelGlobalCounterFromJSON(jsonValue));
    }

    /**
     * get-globalcounter
     */
    async getCollectionResourceGlobalcounterGet1(requestParameters: GetCollectionResourceGlobalcounterGet1Request = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagedModelEntityModelGlobalCounter> {
        const response = await this.getCollectionResourceGlobalcounterGet1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * get-globalcounter
     */
    async getItemResourceGlobalcounterGetRaw(requestParameters: GetItemResourceGlobalcounterGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelGlobalCounter>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getItemResourceGlobalcounterGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/globalCounters/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EntityModelGlobalCounterFromJSON(jsonValue));
    }

    /**
     * get-globalcounter
     */
    async getItemResourceGlobalcounterGet(requestParameters: GetItemResourceGlobalcounterGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelGlobalCounter> {
        const response = await this.getItemResourceGlobalcounterGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * patch-globalcounter
     */
    async patchItemResourceGlobalcounterPatchRaw(requestParameters: PatchItemResourceGlobalcounterPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelGlobalCounter>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling patchItemResourceGlobalcounterPatch.');
        }

        if (requestParameters.globalCounterRequestBody === null || requestParameters.globalCounterRequestBody === undefined) {
            throw new runtime.RequiredError('globalCounterRequestBody','Required parameter requestParameters.globalCounterRequestBody was null or undefined when calling patchItemResourceGlobalcounterPatch.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/globalCounters/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: GlobalCounterRequestBodyToJSON(requestParameters.globalCounterRequestBody),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EntityModelGlobalCounterFromJSON(jsonValue));
    }

    /**
     * patch-globalcounter
     */
    async patchItemResourceGlobalcounterPatch(requestParameters: PatchItemResourceGlobalcounterPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelGlobalCounter> {
        const response = await this.patchItemResourceGlobalcounterPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * create-globalcounter
     */
    async postCollectionResourceGlobalcounterPostRaw(requestParameters: PostCollectionResourceGlobalcounterPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelGlobalCounter>> {
        if (requestParameters.globalCounterRequestBody === null || requestParameters.globalCounterRequestBody === undefined) {
            throw new runtime.RequiredError('globalCounterRequestBody','Required parameter requestParameters.globalCounterRequestBody was null or undefined when calling postCollectionResourceGlobalcounterPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/globalCounters`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GlobalCounterRequestBodyToJSON(requestParameters.globalCounterRequestBody),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EntityModelGlobalCounterFromJSON(jsonValue));
    }

    /**
     * create-globalcounter
     */
    async postCollectionResourceGlobalcounterPost(requestParameters: PostCollectionResourceGlobalcounterPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelGlobalCounter> {
        const response = await this.postCollectionResourceGlobalcounterPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * update-globalcounter
     */
    async putItemResourceGlobalcounterPutRaw(requestParameters: PutItemResourceGlobalcounterPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelGlobalCounter>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling putItemResourceGlobalcounterPut.');
        }

        if (requestParameters.globalCounterRequestBody === null || requestParameters.globalCounterRequestBody === undefined) {
            throw new runtime.RequiredError('globalCounterRequestBody','Required parameter requestParameters.globalCounterRequestBody was null or undefined when calling putItemResourceGlobalcounterPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/globalCounters/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: GlobalCounterRequestBodyToJSON(requestParameters.globalCounterRequestBody),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EntityModelGlobalCounterFromJSON(jsonValue));
    }

    /**
     * update-globalcounter
     */
    async putItemResourceGlobalcounterPut(requestParameters: PutItemResourceGlobalcounterPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelGlobalCounter> {
        const response = await this.putItemResourceGlobalcounterPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
