/* tslint:disable */
/* eslint-disable */
/**
 * ISI Backend API
 * ISI Backend - Serivce für das Informationssystem für soziale Infrastrukturplanung
 *
 * The version of the OpenAPI document: 0.0.1-SNAPSHOT
 * Contact: noreply@mail.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    InformationResponseDto,
    InformationResponseDtoFromJSON,
    InformationResponseDtoToJSON,
    KindergartenDto,
    KindergartenDtoFromJSON,
    KindergartenDtoToJSON,
} from '../models';

export interface CreateKindergartenRequest {
    kindergartenDto: KindergartenDto;
}

export interface DeleteKindergartenByIdRequest {
    id: string;
}

export interface GetKindergartenByIdRequest {
    id: string;
}

export interface UpdateKindergartenRequest {
    kindergartenDto: KindergartenDto;
}

/**
 * 
 */
export class KindergartenApi extends runtime.BaseAPI {

    /**
     * Anlegen eines neuen Kindergartens
     */
    async createKindergartenRaw(requestParameters: CreateKindergartenRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<KindergartenDto>> {
        if (requestParameters.kindergartenDto === null || requestParameters.kindergartenDto === undefined) {
            throw new runtime.RequiredError('kindergartenDto','Required parameter requestParameters.kindergartenDto was null or undefined when calling createKindergarten.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/kindergarten`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: KindergartenDtoToJSON(requestParameters.kindergartenDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => KindergartenDtoFromJSON(jsonValue));
    }

    /**
     * Anlegen eines neuen Kindergartens
     */
    async createKindergarten(requestParameters: CreateKindergartenRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<KindergartenDto> {
        const response = await this.createKindergartenRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Löschen eines Kindergartens
     */
    async deleteKindergartenByIdRaw(requestParameters: DeleteKindergartenByIdRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteKindergartenById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/kindergarten/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Löschen eines Kindergartens
     */
    async deleteKindergartenById(requestParameters: DeleteKindergartenByIdRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
        await this.deleteKindergartenByIdRaw(requestParameters, initOverrides);
    }

    /**
     * Das Ergebnis wird nach Name der Einrichtung aufsteigend sortiert
     * Lade alle Kindergärten
     */
    async getKindergaertenRaw(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Array<KindergartenDto>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/kindergaerten`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(KindergartenDtoFromJSON));
    }

    /**
     * Das Ergebnis wird nach Name der Einrichtung aufsteigend sortiert
     * Lade alle Kindergärten
     */
    async getKindergaerten(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Array<KindergartenDto>> {
        const response = await this.getKindergaertenRaw(initOverrides);
        return await response.value();
    }

    /**
     * Lesen eines Kindergartens
     */
    async getKindergartenByIdRaw(requestParameters: GetKindergartenByIdRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<KindergartenDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getKindergartenById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/kindergarten/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => KindergartenDtoFromJSON(jsonValue));
    }

    /**
     * Lesen eines Kindergartens
     */
    async getKindergartenById(requestParameters: GetKindergartenByIdRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<KindergartenDto> {
        const response = await this.getKindergartenByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Aktualisierung einer Kindergartens
     */
    async updateKindergartenRaw(requestParameters: UpdateKindergartenRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<KindergartenDto>> {
        if (requestParameters.kindergartenDto === null || requestParameters.kindergartenDto === undefined) {
            throw new runtime.RequiredError('kindergartenDto','Required parameter requestParameters.kindergartenDto was null or undefined when calling updateKindergarten.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/kindergarten`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: KindergartenDtoToJSON(requestParameters.kindergartenDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => KindergartenDtoFromJSON(jsonValue));
    }

    /**
     * Aktualisierung einer Kindergartens
     */
    async updateKindergarten(requestParameters: UpdateKindergartenRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<KindergartenDto> {
        const response = await this.updateKindergartenRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
