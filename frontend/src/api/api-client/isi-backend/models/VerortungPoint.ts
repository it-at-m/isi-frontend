/* tslint:disable */
/* eslint-disable */
/**
 * ISI Backend API
 * ISI Backend - Service für das Informationssystem für soziale Infrastrukturplanung
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: noreply@mail.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Bezirksteil } from './Bezirksteil';
import {
    BezirksteilFromJSON,
    BezirksteilFromJSONTyped,
    BezirksteilToJSON,
} from './Bezirksteil';
import type { Gemarkung } from './Gemarkung';
import {
    GemarkungFromJSON,
    GemarkungFromJSONTyped,
    GemarkungToJSON,
} from './Gemarkung';
import type { Grundschulsprengel } from './Grundschulsprengel';
import {
    GrundschulsprengelFromJSON,
    GrundschulsprengelFromJSONTyped,
    GrundschulsprengelToJSON,
} from './Grundschulsprengel';
import type { Kitaplanungsbereich } from './Kitaplanungsbereich';
import {
    KitaplanungsbereichFromJSON,
    KitaplanungsbereichFromJSONTyped,
    KitaplanungsbereichToJSON,
} from './Kitaplanungsbereich';
import type { Mittelschulsprengel } from './Mittelschulsprengel';
import {
    MittelschulsprengelFromJSON,
    MittelschulsprengelFromJSONTyped,
    MittelschulsprengelToJSON,
} from './Mittelschulsprengel';
import type { PointGeometry } from './PointGeometry';
import {
    PointGeometryFromJSON,
    PointGeometryFromJSONTyped,
    PointGeometryToJSON,
} from './PointGeometry';
import type { Stadtbezirk } from './Stadtbezirk';
import {
    StadtbezirkFromJSON,
    StadtbezirkFromJSONTyped,
    StadtbezirkToJSON,
} from './Stadtbezirk';
import type { Viertel } from './Viertel';
import {
    ViertelFromJSON,
    ViertelFromJSONTyped,
    ViertelToJSON,
} from './Viertel';

/**
 * 
 * @export
 * @interface VerortungPoint
 */
export interface VerortungPoint {
    /**
     * 
     * @type {Set<Stadtbezirk>}
     * @memberof VerortungPoint
     */
    stadtbezirke?: Set<Stadtbezirk>;
    /**
     * 
     * @type {Set<Bezirksteil>}
     * @memberof VerortungPoint
     */
    bezirksteile?: Set<Bezirksteil>;
    /**
     * 
     * @type {Set<Viertel>}
     * @memberof VerortungPoint
     */
    viertel?: Set<Viertel>;
    /**
     * 
     * @type {Set<Gemarkung>}
     * @memberof VerortungPoint
     */
    gemarkungen?: Set<Gemarkung>;
    /**
     * 
     * @type {Set<Kitaplanungsbereich>}
     * @memberof VerortungPoint
     */
    kitaplanungsbereiche?: Set<Kitaplanungsbereich>;
    /**
     * 
     * @type {Set<Grundschulsprengel>}
     * @memberof VerortungPoint
     */
    grundschulsprengel?: Set<Grundschulsprengel>;
    /**
     * 
     * @type {Set<Mittelschulsprengel>}
     * @memberof VerortungPoint
     */
    mittelschulsprengel?: Set<Mittelschulsprengel>;
    /**
     * 
     * @type {PointGeometry}
     * @memberof VerortungPoint
     */
    point?: PointGeometry;
}

/**
 * Check if a given object implements the VerortungPoint interface.
 */
export function instanceOfVerortungPoint(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function VerortungPointFromJSON(json: any): VerortungPoint {
    return VerortungPointFromJSONTyped(json, false);
}

export function VerortungPointFromJSONTyped(json: any, ignoreDiscriminator: boolean): VerortungPoint {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'stadtbezirke': !exists(json, 'stadtbezirke') ? undefined : (new Set((json['stadtbezirke'] as Array<any>).map(StadtbezirkFromJSON))),
        'bezirksteile': !exists(json, 'bezirksteile') ? undefined : (new Set((json['bezirksteile'] as Array<any>).map(BezirksteilFromJSON))),
        'viertel': !exists(json, 'viertel') ? undefined : (new Set((json['viertel'] as Array<any>).map(ViertelFromJSON))),
        'gemarkungen': !exists(json, 'gemarkungen') ? undefined : (new Set((json['gemarkungen'] as Array<any>).map(GemarkungFromJSON))),
        'kitaplanungsbereiche': !exists(json, 'kitaplanungsbereiche') ? undefined : (new Set((json['kitaplanungsbereiche'] as Array<any>).map(KitaplanungsbereichFromJSON))),
        'grundschulsprengel': !exists(json, 'grundschulsprengel') ? undefined : (new Set((json['grundschulsprengel'] as Array<any>).map(GrundschulsprengelFromJSON))),
        'mittelschulsprengel': !exists(json, 'mittelschulsprengel') ? undefined : (new Set((json['mittelschulsprengel'] as Array<any>).map(MittelschulsprengelFromJSON))),
        'point': !exists(json, 'point') ? undefined : PointGeometryFromJSON(json['point']),
    };
}

export function VerortungPointToJSON(value?: VerortungPoint | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'stadtbezirke': value.stadtbezirke === undefined ? undefined : (Array.from(value.stadtbezirke as Set<any>).map(StadtbezirkToJSON)),
        'bezirksteile': value.bezirksteile === undefined ? undefined : (Array.from(value.bezirksteile as Set<any>).map(BezirksteilToJSON)),
        'viertel': value.viertel === undefined ? undefined : (Array.from(value.viertel as Set<any>).map(ViertelToJSON)),
        'gemarkungen': value.gemarkungen === undefined ? undefined : (Array.from(value.gemarkungen as Set<any>).map(GemarkungToJSON)),
        'kitaplanungsbereiche': value.kitaplanungsbereiche === undefined ? undefined : (Array.from(value.kitaplanungsbereiche as Set<any>).map(KitaplanungsbereichToJSON)),
        'grundschulsprengel': value.grundschulsprengel === undefined ? undefined : (Array.from(value.grundschulsprengel as Set<any>).map(GrundschulsprengelToJSON)),
        'mittelschulsprengel': value.mittelschulsprengel === undefined ? undefined : (Array.from(value.mittelschulsprengel as Set<any>).map(MittelschulsprengelToJSON)),
        'point': PointGeometryToJSON(value.point),
    };
}

