/* tslint:disable */
/* eslint-disable */
/**
 * ISI Backend API
 * ISI Backend - Service für das Informationssystem für soziale Infrastrukturplanung
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: noreply@mail.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Gemarkung } from './Gemarkung';
import {
    GemarkungFromJSON,
    GemarkungFromJSONTyped,
    GemarkungToJSON,
} from './Gemarkung';
import type { MultiPolygonGeometry } from './MultiPolygonGeometry';
import {
    MultiPolygonGeometryFromJSON,
    MultiPolygonGeometryFromJSONTyped,
    MultiPolygonGeometryToJSON,
} from './MultiPolygonGeometry';
import type { Stadtbezirk } from './Stadtbezirk';
import {
    StadtbezirkFromJSON,
    StadtbezirkFromJSONTyped,
    StadtbezirkToJSON,
} from './Stadtbezirk';

/**
 * 
 * @export
 * @interface VerortungMultiPolygon
 */
export interface VerortungMultiPolygon {
    /**
     * 
     * @type {Set<Stadtbezirk>}
     * @memberof VerortungMultiPolygon
     */
    stadtbezirke?: Set<Stadtbezirk>;
    /**
     * 
     * @type {Set<Gemarkung>}
     * @memberof VerortungMultiPolygon
     */
    gemarkungen?: Set<Gemarkung>;
    /**
     * 
     * @type {MultiPolygonGeometry}
     * @memberof VerortungMultiPolygon
     */
    multiPolygon?: MultiPolygonGeometry;
}

/**
 * Check if a given object implements the VerortungMultiPolygon interface.
 */
export function instanceOfVerortungMultiPolygon(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function VerortungMultiPolygonFromJSON(json: any): VerortungMultiPolygon {
    return VerortungMultiPolygonFromJSONTyped(json, false);
}

export function VerortungMultiPolygonFromJSONTyped(json: any, ignoreDiscriminator: boolean): VerortungMultiPolygon {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'stadtbezirke': !exists(json, 'stadtbezirke') ? undefined : (new Set((json['stadtbezirke'] as Array<any>).map(StadtbezirkFromJSON))),
        'gemarkungen': !exists(json, 'gemarkungen') ? undefined : (new Set((json['gemarkungen'] as Array<any>).map(GemarkungFromJSON))),
        'multiPolygon': !exists(json, 'multiPolygon') ? undefined : MultiPolygonGeometryFromJSON(json['multiPolygon']),
    };
}

export function VerortungMultiPolygonToJSON(value?: VerortungMultiPolygon | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'stadtbezirke': value.stadtbezirke === undefined ? undefined : (Array.from(value.stadtbezirke as Set<any>).map(StadtbezirkToJSON)),
        'gemarkungen': value.gemarkungen === undefined ? undefined : (Array.from(value.gemarkungen as Set<any>).map(GemarkungToJSON)),
        'multiPolygon': MultiPolygonGeometryToJSON(value.multiPolygon),
    };
}

