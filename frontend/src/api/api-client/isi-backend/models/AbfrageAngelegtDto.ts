/* tslint:disable */
/* eslint-disable */
/**
 * ISI Backend API
 * ISI Backend - Service für das Informationssystem für soziale Infrastrukturplanung
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: noreply@mail.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    AdresseDto,
    AdresseDtoFromJSON,
    AdresseDtoFromJSONTyped,
    AdresseDtoToJSON,
} from './AdresseDto';
import {
    DokumentDto,
    DokumentDtoFromJSON,
    DokumentDtoFromJSONTyped,
    DokumentDtoToJSON,
} from './DokumentDto';
import {
    VerortungModel,
    VerortungModelFromJSON,
    VerortungModelFromJSONTyped,
    VerortungModelToJSON,
} from './VerortungModel';

/**
 * 
 * @export
 * @interface AbfrageAngelegtDto
 */
export interface AbfrageAngelegtDto {
    /**
     * 
     * @type {Array<DokumentDto>}
     * @memberof AbfrageAngelegtDto
     */
    dokumente?: Array<DokumentDto>;
    /**
     * 
     * @type {string}
     * @memberof AbfrageAngelegtDto
     */
    allgemeineOrtsangabe?: string;
    /**
     * 
     * @type {AdresseDto}
     * @memberof AbfrageAngelegtDto
     */
    adresse?: AdresseDto;
    /**
     * 
     * @type {VerortungModel}
     * @memberof AbfrageAngelegtDto
     */
    verortung?: VerortungModel;
    /**
     * 
     * @type {Date}
     * @memberof AbfrageAngelegtDto
     */
    fristStellungnahme: Date;
    /**
     * 
     * @type {string}
     * @memberof AbfrageAngelegtDto
     */
    anmerkung?: string;
    /**
     * 
     * @type {string}
     * @memberof AbfrageAngelegtDto
     */
    bebauungsplannummer?: string;
    /**
     * 
     * @type {string}
     * @memberof AbfrageAngelegtDto
     */
    nameAbfrage: string;
    /**
     * 
     * @type {string}
     * @memberof AbfrageAngelegtDto
     */
    standVorhaben: AbfrageAngelegtDtoStandVorhabenEnum;
    /**
     * 
     * @type {string}
     * @memberof AbfrageAngelegtDto
     */
    bauvorhaben?: string;
}


/**
 * @export
 */
export const AbfrageAngelegtDtoStandVorhabenEnum = {
    Unspecified: 'UNSPECIFIED',
    GrundsatzEckdatenbeschluss: 'GRUNDSATZ_ECKDATENBESCHLUSS',
    Aufstellungsbeschluss: 'AUFSTELLUNGSBESCHLUSS',
    Parag31Baugb: 'PARAG_3_1_BAUGB',
    Parag32Baugb: 'PARAG_3_2_BAUGB',
    Parag412Baugb: 'PARAG_4_1_2_BAUGB',
    Billigungsbeschluss: 'BILLIGUNGSBESCHLUSS',
    Satzungsbeschluss: 'SATZUNGSBESCHLUSS',
    BplanInKraft: 'BPLAN_IN_KRAFT',
    VorbescheidEingereicht: 'VORBESCHEID_EINGEREICHT',
    BauantragEingereicht: 'BAUANTRAG_EINGEREICHT',
    BaugenehmigungErteilt: 'BAUGENEHMIGUNG_ERTEILT',
    BaubeginnAngezeigt: 'BAUBEGINN_ANGEZEIGT',
    BaufertigstellungGeplant: 'BAUFERTIGSTELLUNG_GEPLANT',
    BaufertigstellungAngezeigt: 'BAUFERTIGSTELLUNG_ANGEZEIGT'
} as const;
export type AbfrageAngelegtDtoStandVorhabenEnum = typeof AbfrageAngelegtDtoStandVorhabenEnum[keyof typeof AbfrageAngelegtDtoStandVorhabenEnum];


export function AbfrageAngelegtDtoFromJSON(json: any): AbfrageAngelegtDto {
    return AbfrageAngelegtDtoFromJSONTyped(json, false);
}

export function AbfrageAngelegtDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): AbfrageAngelegtDto {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'dokumente': !exists(json, 'dokumente') ? undefined : ((json['dokumente'] as Array<any>).map(DokumentDtoFromJSON)),
        'allgemeineOrtsangabe': !exists(json, 'allgemeineOrtsangabe') ? undefined : json['allgemeineOrtsangabe'],
        'adresse': !exists(json, 'adresse') ? undefined : AdresseDtoFromJSON(json['adresse']),
        'verortung': !exists(json, 'verortung') ? undefined : VerortungModelFromJSON(json['verortung']),
        'fristStellungnahme': (new Date(json['fristStellungnahme'])),
        'anmerkung': !exists(json, 'anmerkung') ? undefined : json['anmerkung'],
        'bebauungsplannummer': !exists(json, 'bebauungsplannummer') ? undefined : json['bebauungsplannummer'],
        'nameAbfrage': json['nameAbfrage'],
        'standVorhaben': json['standVorhaben'],
        'bauvorhaben': !exists(json, 'bauvorhaben') ? undefined : json['bauvorhaben'],
    };
}

export function AbfrageAngelegtDtoToJSON(value?: AbfrageAngelegtDto | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'dokumente': value.dokumente === undefined ? undefined : ((value.dokumente as Array<any>).map(DokumentDtoToJSON)),
        'allgemeineOrtsangabe': value.allgemeineOrtsangabe,
        'adresse': AdresseDtoToJSON(value.adresse),
        'verortung': VerortungModelToJSON(value.verortung),
        'fristStellungnahme': (value.fristStellungnahme.toISOString().substr(0,10)),
        'anmerkung': value.anmerkung,
        'bebauungsplannummer': value.bebauungsplannummer,
        'nameAbfrage': value.nameAbfrage,
        'standVorhaben': value.standVorhaben,
        'bauvorhaben': value.bauvorhaben,
    };
}

