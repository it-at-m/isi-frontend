/* tslint:disable */
/* eslint-disable */
/**
 * ISI Backend API
 * ISI Backend - Service für das Informationssystem für soziale Infrastrukturplanung
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: noreply@mail.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BaugenehmigungsverfahrenDto } from './BaugenehmigungsverfahrenDto';
import {
    BaugenehmigungsverfahrenDtoFromJSON,
    BaugenehmigungsverfahrenDtoFromJSONTyped,
    BaugenehmigungsverfahrenDtoToJSON,
} from './BaugenehmigungsverfahrenDto';
import type { BauleitplanverfahrenDto } from './BauleitplanverfahrenDto';
import {
    BauleitplanverfahrenDtoFromJSON,
    BauleitplanverfahrenDtoFromJSONTyped,
    BauleitplanverfahrenDtoToJSON,
} from './BauleitplanverfahrenDto';
import type { StatusAbfrage } from './StatusAbfrage';
import {
    StatusAbfrageFromJSON,
    StatusAbfrageFromJSONTyped,
    StatusAbfrageToJSON,
} from './StatusAbfrage';
import type { WeiteresVerfahrenDto } from './WeiteresVerfahrenDto';
import {
    WeiteresVerfahrenDtoFromJSON,
    WeiteresVerfahrenDtoFromJSONTyped,
    WeiteresVerfahrenDtoToJSON,
} from './WeiteresVerfahrenDto';

import {
     BaugenehmigungsverfahrenDtoFromJSONTyped,
     BauleitplanverfahrenDtoFromJSONTyped,
     WeiteresVerfahrenDtoFromJSONTyped
} from './';

/**
 * AbfrageDto
 * @export
 * @interface AbfrageDto
 */
export interface AbfrageDto {
    /**
     * 
     * @type {string}
     * @memberof AbfrageDto
     */
    id?: string;
    /**
     * 
     * @type {number}
     * @memberof AbfrageDto
     */
    version?: number;
    /**
     * 
     * @type {Date}
     * @memberof AbfrageDto
     */
    createdDateTime?: Date;
    /**
     * 
     * @type {Date}
     * @memberof AbfrageDto
     */
    lastModifiedDateTime?: Date;
    /**
     * 
     * @type {string}
     * @memberof AbfrageDto
     */
    artAbfrage?: AbfrageDtoArtAbfrageEnum;
    /**
     * 
     * @type {string}
     * @memberof AbfrageDto
     */
    name?: string;
    /**
     * 
     * @type {StatusAbfrage}
     * @memberof AbfrageDto
     */
    statusAbfrage?: StatusAbfrage;
    /**
     * 
     * @type {string}
     * @memberof AbfrageDto
     */
    anmerkung?: string;
    /**
     * 
     * @type {string}
     * @memberof AbfrageDto
     */
    bauvorhaben?: string;
    /**
     * 
     * @type {string}
     * @memberof AbfrageDto
     */
    sub?: string;
    /**
     * 
     * @type {string}
     * @memberof AbfrageDto
     */
    displayName?: string;
    /**
     * 
     * @type {string}
     * @memberof AbfrageDto
     */
    eakte?: string;
}


/**
 * @export
 */
export const AbfrageDtoArtAbfrageEnum = {
    Unspecified: 'UNSPECIFIED',
    Bauleitplanverfahren: 'BAULEITPLANVERFAHREN',
    Baugenehmigungsverfahren: 'BAUGENEHMIGUNGSVERFAHREN',
    WeiteresVerfahren: 'WEITERES_VERFAHREN'
} as const;
export type AbfrageDtoArtAbfrageEnum = typeof AbfrageDtoArtAbfrageEnum[keyof typeof AbfrageDtoArtAbfrageEnum];


/**
 * Check if a given object implements the AbfrageDto interface.
 */
export function instanceOfAbfrageDto(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function AbfrageDtoFromJSON(json: any): AbfrageDto {
    return AbfrageDtoFromJSONTyped(json, false);
}

export function AbfrageDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): AbfrageDto {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    if (!ignoreDiscriminator) {
        if (json['artAbfrage'] === 'BAUGENEHMIGUNGSVERFAHREN') {
            return BaugenehmigungsverfahrenDtoFromJSONTyped(json, true);
        }
        if (json['artAbfrage'] === 'BAULEITPLANVERFAHREN') {
            return BauleitplanverfahrenDtoFromJSONTyped(json, true);
        }
        if (json['artAbfrage'] === 'WEITERES_VERFAHREN') {
            return WeiteresVerfahrenDtoFromJSONTyped(json, true);
        }
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'version': !exists(json, 'version') ? undefined : json['version'],
        'createdDateTime': !exists(json, 'createdDateTime') ? undefined : (new Date(json['createdDateTime'])),
        'lastModifiedDateTime': !exists(json, 'lastModifiedDateTime') ? undefined : (new Date(json['lastModifiedDateTime'])),
        'artAbfrage': !exists(json, 'artAbfrage') ? undefined : json['artAbfrage'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'statusAbfrage': !exists(json, 'statusAbfrage') ? undefined : StatusAbfrageFromJSON(json['statusAbfrage']),
        'anmerkung': !exists(json, 'anmerkung') ? undefined : json['anmerkung'],
        'bauvorhaben': !exists(json, 'bauvorhaben') ? undefined : json['bauvorhaben'],
        'sub': !exists(json, 'sub') ? undefined : json['sub'],
        'displayName': !exists(json, 'displayName') ? undefined : json['displayName'],
        'eakte': !exists(json, 'eakte') ? undefined : json['eakte'],
    };
}

export function AbfrageDtoToJSON(value?: AbfrageDto | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'version': value.version,
        'createdDateTime': value.createdDateTime === undefined ? undefined : (value.createdDateTime.toISOString()),
        'lastModifiedDateTime': value.lastModifiedDateTime === undefined ? undefined : (value.lastModifiedDateTime.toISOString()),
        'artAbfrage': value.artAbfrage,
        'name': value.name,
        'statusAbfrage': StatusAbfrageToJSON(value.statusAbfrage),
        'anmerkung': value.anmerkung,
        'bauvorhaben': value.bauvorhaben,
        'sub': value.sub,
        'displayName': value.displayName,
        'eakte': value.eakte,
    };
}

