/* tslint:disable */
/* eslint-disable */
/**
 * ISI Backend API
 * ISI Backend - Service für das Informationssystem für soziale Infrastrukturplanung
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: noreply@mail.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    GemarkungModel,
    GemarkungModelFromJSON,
    GemarkungModelFromJSONTyped,
    GemarkungModelToJSON,
} from './GemarkungModel';
import {
    MultiPolygonGeometryModel,
    MultiPolygonGeometryModelFromJSON,
    MultiPolygonGeometryModelFromJSONTyped,
    MultiPolygonGeometryModelToJSON,
} from './MultiPolygonGeometryModel';
import {
    StadtbezirkModel,
    StadtbezirkModelFromJSON,
    StadtbezirkModelFromJSONTyped,
    StadtbezirkModelToJSON,
} from './StadtbezirkModel';

/**
 * 
 * @export
 * @interface VerortungModel
 */
export interface VerortungModel {
    /**
     * 
     * @type {Set<StadtbezirkModel>}
     * @memberof VerortungModel
     */
    stadtbezirke?: Set<StadtbezirkModel>;
    /**
     * 
     * @type {Set<GemarkungModel>}
     * @memberof VerortungModel
     */
    gemarkungen?: Set<GemarkungModel>;
    /**
     * 
     * @type {MultiPolygonGeometryModel}
     * @memberof VerortungModel
     */
    multiPolygon?: MultiPolygonGeometryModel;
}

export function VerortungModelFromJSON(json: any): VerortungModel {
    return VerortungModelFromJSONTyped(json, false);
}

export function VerortungModelFromJSONTyped(json: any, ignoreDiscriminator: boolean): VerortungModel {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'stadtbezirke': !exists(json, 'stadtbezirke') ? undefined : (new Set((json['stadtbezirke'] as Array<any>).map(StadtbezirkModelFromJSON))),
        'gemarkungen': !exists(json, 'gemarkungen') ? undefined : (new Set((json['gemarkungen'] as Array<any>).map(GemarkungModelFromJSON))),
        'multiPolygon': !exists(json, 'multiPolygon') ? undefined : MultiPolygonGeometryModelFromJSON(json['multiPolygon']),
    };
}

export function VerortungModelToJSON(value?: VerortungModel | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'stadtbezirke': value.stadtbezirke === undefined ? undefined : (Array.from(value.stadtbezirke as Set<any>).map(StadtbezirkModelToJSON)),
        'gemarkungen': value.gemarkungen === undefined ? undefined : (Array.from(value.gemarkungen as Set<any>).map(GemarkungModelToJSON)),
        'multiPolygon': MultiPolygonGeometryModelToJSON(value.multiPolygon),
    };
}

