/* tslint:disable */
/* eslint-disable */
/**
 * ISI Backend API
 * ISI Backend - Service für das Informationssystem für soziale Infrastrukturplanung
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: noreply@mail.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    AbfragevarianteBauleitplanverfahrenDto,
    AbfragevarianteBauleitplanverfahrenDtoFromJSON,
    AbfragevarianteBauleitplanverfahrenDtoFromJSONTyped,
    AbfragevarianteBauleitplanverfahrenDtoToJSON,
} from './AbfragevarianteBauleitplanverfahrenDto';
import {
    AdresseDto,
    AdresseDtoFromJSON,
    AdresseDtoFromJSONTyped,
    AdresseDtoToJSON,
} from './AdresseDto';
import {
    DokumentDto,
    DokumentDtoFromJSON,
    DokumentDtoFromJSONTyped,
    DokumentDtoToJSON,
} from './DokumentDto';
import {
    UncertainBoolean,
    UncertainBooleanFromJSON,
    UncertainBooleanFromJSONTyped,
    UncertainBooleanToJSON,
} from './UncertainBoolean';
import {
    VerortungDto,
    VerortungDtoFromJSON,
    VerortungDtoFromJSONTyped,
    VerortungDtoToJSON,
} from './VerortungDto';

/**
 * 
 * @export
 * @interface BauleitplanverfahrenDto
 */
export interface BauleitplanverfahrenDto {
    /**
     * 
     * @type {string}
     * @memberof BauleitplanverfahrenDto
     */
    id?: string;
    /**
     * 
     * @type {number}
     * @memberof BauleitplanverfahrenDto
     */
    version?: number;
    /**
     * 
     * @type {Date}
     * @memberof BauleitplanverfahrenDto
     */
    createdDateTime?: Date;
    /**
     * 
     * @type {Date}
     * @memberof BauleitplanverfahrenDto
     */
    lastModifiedDateTime?: Date;
    /**
     * 
     * @type {string}
     * @memberof BauleitplanverfahrenDto
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof BauleitplanverfahrenDto
     */
    bebauungsplannummer?: string;
    /**
     * 
     * @type {string}
     * @memberof BauleitplanverfahrenDto
     */
    bauvorhaben?: string;
    /**
     * 
     * @type {UncertainBoolean}
     * @memberof BauleitplanverfahrenDto
     */
    sobonRelevant: UncertainBoolean;
    /**
     * 
     * @type {string}
     * @memberof BauleitplanverfahrenDto
     */
    standVerfahren: BauleitplanverfahrenDtoStandVerfahrenEnum;
    /**
     * 
     * @type {string}
     * @memberof BauleitplanverfahrenDto
     */
    standVerfahrenFreieEingabe?: string;
    /**
     * 
     * @type {AdresseDto}
     * @memberof BauleitplanverfahrenDto
     */
    adresse?: AdresseDto;
    /**
     * 
     * @type {VerortungDto}
     * @memberof BauleitplanverfahrenDto
     */
    verortung?: VerortungDto;
    /**
     * 
     * @type {Array<DokumentDto>}
     * @memberof BauleitplanverfahrenDto
     */
    dokumente?: Array<DokumentDto>;
    /**
     * 
     * @type {Date}
     * @memberof BauleitplanverfahrenDto
     */
    fristBearbeitung: Date;
    /**
     * 
     * @type {UncertainBoolean}
     * @memberof BauleitplanverfahrenDto
     */
    offizielleMitzeichnung: UncertainBoolean;
    /**
     * 
     * @type {string}
     * @memberof BauleitplanverfahrenDto
     */
    anmerkung?: string;
    /**
     * 
     * @type {Array<AbfragevarianteBauleitplanverfahrenDto>}
     * @memberof BauleitplanverfahrenDto
     */
    abfragevarianten?: Array<AbfragevarianteBauleitplanverfahrenDto>;
    /**
     * 
     * @type {Array<AbfragevarianteBauleitplanverfahrenDto>}
     * @memberof BauleitplanverfahrenDto
     */
    abfragevariantenSachbearbeitung?: Array<AbfragevarianteBauleitplanverfahrenDto>;
    /**
     * 
     * @type {string}
     * @memberof BauleitplanverfahrenDto
     */
    artAbfrage?: BauleitplanverfahrenDtoArtAbfrageEnum;
}


/**
 * @export
 */
export const BauleitplanverfahrenDtoStandVerfahrenEnum = {
    Unspecified: 'UNSPECIFIED',
    VorbereitungEckdatenbeschluss: 'VORBEREITUNG_ECKDATENBESCHLUSS',
    VorbereitungWettbewerbauslobung: 'VORBEREITUNG_WETTBEWERBAUSLOBUNG',
    VorbereitungAufstellungsbeschluss: 'VORBEREITUNG_AUFSTELLUNGSBESCHLUSS',
    VorbereitungBilligungsbeschlussStaedtebaulicherVertrag: 'VORBEREITUNG_BILLIGUNGSBESCHLUSS_STAEDTEBAULICHER_VERTRAG',
    VorliegenderSatzungsbeschluss: 'VORLIEGENDER_SATZUNGSBESCHLUSS',
    RechtsverbindlichkeitAmtsblatt: 'RECHTSVERBINDLICHKEIT_AMTSBLATT',
    Aufteilungsplan: 'AUFTEILUNGSPLAN',
    InfoFehlt: 'INFO_FEHLT',
    FreieEingabe: 'FREIE_EINGABE'
} as const;
export type BauleitplanverfahrenDtoStandVerfahrenEnum = typeof BauleitplanverfahrenDtoStandVerfahrenEnum[keyof typeof BauleitplanverfahrenDtoStandVerfahrenEnum];

/**
 * @export
 */
export const BauleitplanverfahrenDtoArtAbfrageEnum = {
    Bauleitplanverfahren: 'BAULEITPLANVERFAHREN',
    Baugenehmigungsverfahren: 'BAUGENEHMIGUNGSVERFAHREN',
    WeitereAbfragen: 'WEITERE_ABFRAGEN'
} as const;
export type BauleitplanverfahrenDtoArtAbfrageEnum = typeof BauleitplanverfahrenDtoArtAbfrageEnum[keyof typeof BauleitplanverfahrenDtoArtAbfrageEnum];


export function BauleitplanverfahrenDtoFromJSON(json: any): BauleitplanverfahrenDto {
    return BauleitplanverfahrenDtoFromJSONTyped(json, false);
}

export function BauleitplanverfahrenDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): BauleitplanverfahrenDto {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'version': !exists(json, 'version') ? undefined : json['version'],
        'createdDateTime': !exists(json, 'createdDateTime') ? undefined : (new Date(json['createdDateTime'])),
        'lastModifiedDateTime': !exists(json, 'lastModifiedDateTime') ? undefined : (new Date(json['lastModifiedDateTime'])),
        'name': json['name'],
        'bebauungsplannummer': !exists(json, 'bebauungsplannummer') ? undefined : json['bebauungsplannummer'],
        'bauvorhaben': !exists(json, 'bauvorhaben') ? undefined : json['bauvorhaben'],
        'sobonRelevant': UncertainBooleanFromJSON(json['sobonRelevant']),
        'standVerfahren': json['standVerfahren'],
        'standVerfahrenFreieEingabe': !exists(json, 'standVerfahrenFreieEingabe') ? undefined : json['standVerfahrenFreieEingabe'],
        'adresse': !exists(json, 'adresse') ? undefined : AdresseDtoFromJSON(json['adresse']),
        'verortung': !exists(json, 'verortung') ? undefined : VerortungDtoFromJSON(json['verortung']),
        'dokumente': !exists(json, 'dokumente') ? undefined : ((json['dokumente'] as Array<any>).map(DokumentDtoFromJSON)),
        'fristBearbeitung': (new Date(json['fristBearbeitung'])),
        'offizielleMitzeichnung': UncertainBooleanFromJSON(json['offizielleMitzeichnung']),
        'anmerkung': !exists(json, 'anmerkung') ? undefined : json['anmerkung'],
        'abfragevarianten': !exists(json, 'abfragevarianten') ? undefined : ((json['abfragevarianten'] as Array<any>).map(AbfragevarianteBauleitplanverfahrenDtoFromJSON)),
        'abfragevariantenSachbearbeitung': !exists(json, 'abfragevariantenSachbearbeitung') ? undefined : ((json['abfragevariantenSachbearbeitung'] as Array<any>).map(AbfragevarianteBauleitplanverfahrenDtoFromJSON)),
        'artAbfrage': !exists(json, 'artAbfrage') ? undefined : json['artAbfrage'],
    };
}

export function BauleitplanverfahrenDtoToJSON(value?: BauleitplanverfahrenDto | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'version': value.version,
        'createdDateTime': value.createdDateTime === undefined ? undefined : (value.createdDateTime.toISOString()),
        'lastModifiedDateTime': value.lastModifiedDateTime === undefined ? undefined : (value.lastModifiedDateTime.toISOString()),
        'name': value.name,
        'bebauungsplannummer': value.bebauungsplannummer,
        'bauvorhaben': value.bauvorhaben,
        'sobonRelevant': UncertainBooleanToJSON(value.sobonRelevant),
        'standVerfahren': value.standVerfahren,
        'standVerfahrenFreieEingabe': value.standVerfahrenFreieEingabe,
        'adresse': AdresseDtoToJSON(value.adresse),
        'verortung': VerortungDtoToJSON(value.verortung),
        'dokumente': value.dokumente === undefined ? undefined : ((value.dokumente as Array<any>).map(DokumentDtoToJSON)),
        'fristBearbeitung': (value.fristBearbeitung.toISOString().substr(0,10)),
        'offizielleMitzeichnung': UncertainBooleanToJSON(value.offizielleMitzeichnung),
        'anmerkung': value.anmerkung,
        'abfragevarianten': value.abfragevarianten === undefined ? undefined : ((value.abfragevarianten as Array<any>).map(AbfragevarianteBauleitplanverfahrenDtoToJSON)),
        'abfragevariantenSachbearbeitung': value.abfragevariantenSachbearbeitung === undefined ? undefined : ((value.abfragevariantenSachbearbeitung as Array<any>).map(AbfragevarianteBauleitplanverfahrenDtoToJSON)),
        'artAbfrage': value.artAbfrage,
    };
}

